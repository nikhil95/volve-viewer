{"version":3,"file":"895.itk-wasm.min.js","mappings":"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","sources":["webpack://itk/webpack/universalModuleDefinition","webpack://itk/webpack/runtime/chunk loaded","webpack://itk/webpack/runtime/startup chunk dependencies","webpack://itk/./src/core/internal/loadEmscriptenModuleWebWorker.ts","webpack://itk/./src/web-workers/loadPipelineModule.ts","webpack://itk/./src/io/internal/MimeToImageIO.ts","webpack://itk/./src/io/extensionToImageIO.ts","webpack://itk/./src/io/getFileExtension.ts","webpack://itk/./src/io/internal/ImageIOIndex.ts","webpack://itk/./src/core/InterfaceTypes.ts","webpack://itk/./src/core/IOTypes.ts","webpack://itk/./src/core/IntTypes.ts","webpack://itk/./src/core/FloatTypes.ts","webpack://itk/./src/core/bufferToTypedArray.ts","webpack://itk/./src/pipeline/internal/runPipelineEmscripten.ts","webpack://itk/./src/web-workers/loadImageIOPipelineModule.ts","webpack://itk/./src/io/internal/MimeToMeshIO.ts","webpack://itk/./src/io/extensionToMeshIO.ts","webpack://itk/./src/io/internal/MeshIOIndex.ts","webpack://itk/./src/web-workers/loadMeshIOPipelineModule.ts","webpack://itk/./src/core/getTransferable.ts","webpack://itk/./src/web-workers/pipeline.worker.ts","webpack://itk/./src/web-workers/runPipeline.ts","webpack://itk/./src/core/internal/meshTransferables.ts","webpack://itk/./src/core/internal/polyDataTransferables.ts","webpack://itk/webpack/bootstrap","webpack://itk/webpack/runtime/compat get default export","webpack://itk/webpack/runtime/define property getters","webpack://itk/webpack/runtime/ensure chunk","webpack://itk/webpack/runtime/get javascript chunk filename","webpack://itk/webpack/runtime/global","webpack://itk/webpack/runtime/hasOwnProperty shorthand","webpack://itk/webpack/runtime/publicPath","webpack://itk/webpack/runtime/importScripts chunk loading","webpack://itk/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"itk\"] = factory();\n\telse\n\t\troot[\"itk\"] = factory();\n})(self, () => {\nreturn ","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(174).then(next);\n};","import axios from 'axios'\n\nimport ITKWASMEmscriptenModule from '../ITKWASMEmscriptenModule.js'\n\n// Load the Emscripten module in the browser in a WebWorker.\n//\n// baseUrl is usually taken from '../itkConfig.js', but a different value\n// could be passed.\nasync function loadEmscriptenModuleWebWorker(moduleRelativePathOrURL: string | URL, baseUrl: string): Promise<ITKWASMEmscriptenModule> {\n  let modulePrefix = null\n  if (typeof moduleRelativePathOrURL !== 'string') {\n    modulePrefix = moduleRelativePathOrURL.href\n  } else if (moduleRelativePathOrURL.startsWith('http')) {\n    modulePrefix = moduleRelativePathOrURL\n  } else {\n    modulePrefix = `${baseUrl}/${moduleRelativePathOrURL}`\n  }\n  if (modulePrefix.endsWith('.js')) {\n    modulePrefix = modulePrefix.substring(0, modulePrefix.length - 3)\n  }\n  if (modulePrefix.endsWith('.wasm')) {\n    modulePrefix = modulePrefix.substring(0, modulePrefix.length - 5)\n  }\n  // importScripts / UMD is required over dynamic ESM import until Firefox\n  // adds worker dynamic import support:\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1540913\n  const wasmBinaryPath = `${modulePrefix}.wasm`\n  const response = await axios.get(wasmBinaryPath, { responseType: 'arraybuffer' })\n  const wasmBinary = response.data\n  const modulePath = `${modulePrefix}.umd.js`\n  importScripts(modulePath)\n  const moduleBaseName: string = modulePrefix.replace(/.*\\//, '')\n  // @ts-ignore: error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'WorkerGlobalScope & typeof globalThis'.\n  const wrapperModule = self[moduleBaseName] as (moduleParams: object) => object\n  const emscriptenModule = wrapperModule({ wasmBinary }) as ITKWASMEmscriptenModule\n  return emscriptenModule\n}\n\nexport default loadEmscriptenModuleWebWorker\n","import loadEmscriptenModule from '../core/internal/loadEmscriptenModuleWebWorker.js'\nimport PipelineEmscriptenModule from '../pipeline/PipelineEmscriptenModule.js'\n\n// To cache loaded pipeline modules\nconst pipelineToModule: Map<string,PipelineEmscriptenModule> = new Map()\n\nasync function loadPipelineModule (pipelinePath: string | object, baseUrl: string): Promise<PipelineEmscriptenModule> {\n  let moduleRelativePathOrURL: string | URL = pipelinePath as string\n  let pipeline = pipelinePath as string\n  let pipelineModule = null\n  if (typeof pipelinePath !== 'string') {\n    moduleRelativePathOrURL = new URL((pipelinePath as URL).href)\n    pipeline = moduleRelativePathOrURL.href\n  }\n  if (pipelineToModule.has(pipeline)) {\n    pipelineModule = pipelineToModule.get(pipeline) as PipelineEmscriptenModule\n  } else {\n    pipelineToModule.set(pipeline, await loadEmscriptenModule(moduleRelativePathOrURL, baseUrl) as PipelineEmscriptenModule)\n    pipelineModule = pipelineToModule.get(pipeline) as PipelineEmscriptenModule\n  }\n  return pipelineModule\n}\n\nexport default loadPipelineModule","const mimeToIO = new Map([\n  ['image/jpeg', 'JPEGImageIO'],\n  ['image/png', 'PNGImageIO'],\n  ['image/tiff', 'TIFFImageIO'],\n  ['image/x-ms-bmp', 'BMPImageIO'],\n  ['image/x-bmp', 'BMPImageIO'],\n  ['image/bmp', 'BMPImageIO'],\n  ['application/dicom', 'GDCMImageIO']\n])\n\nexport default mimeToIO\n","const extensionToIO = new Map([\n  ['bmp', 'BMPImageIO'],\n  ['BMP', 'BMPImageIO'],\n\n  ['dcm', 'GDCMImageIO'],\n  ['DCM', 'GDCMImageIO'],\n\n  ['gipl', 'GiplImageIO'],\n  ['gipl.gz', 'GiplImageIO'],\n\n  ['hdf5', 'HDF5ImageIO'],\n\n  ['jpg', 'JPEGImageIO'],\n  ['JPG', 'JPEGImageIO'],\n  ['jpeg', 'JPEGImageIO'],\n  ['JPEG', 'JPEGImageIO'],\n\n  ['iwi', 'WASMImageIO'],\n  ['iwi.cbor', 'WASMImageIO'],\n  ['iwi.cbor.zstd', 'WASMZstdImageIO'],\n\n  ['lsm', 'LSMImageIO'],\n\n  ['mnc', 'MINCImageIO'],\n  ['MNC', 'MINCImageIO'],\n  ['mnc.gz', 'MINCImageIO'],\n  ['MNC.GZ', 'MINCImageIO'],\n  ['mnc2', 'MINCImageIO'],\n  ['MNC2', 'MINCImageIO'],\n\n  ['mgh', 'MGHImageIO'],\n  ['mgz', 'MGHImageIO'],\n  ['mgh.gz', 'MGHImageIO'],\n\n  ['mha', 'MetaImageIO'],\n  ['mhd', 'MetaImageIO'],\n\n  ['mrc', 'MRCImageIO'],\n\n  ['nia', 'NiftiImageIO'],\n  ['nii', 'NiftiImageIO'],\n  ['nii.gz', 'NiftiImageIO'],\n  ['hdr', 'NiftiImageIO'],\n\n  ['nrrd', 'NrrdImageIO'],\n  ['NRRD', 'NrrdImageIO'],\n  ['nhdr', 'NrrdImageIO'],\n  ['NHDR', 'NrrdImageIO'],\n\n  ['png', 'PNGImageIO'],\n  ['PNG', 'PNGImageIO'],\n\n  ['pic', 'BioRadImageIO'],\n  ['PIC', 'BioRadImageIO'],\n\n  ['tif', 'TIFFImageIO'],\n  ['TIF', 'TIFFImageIO'],\n  ['tiff', 'TIFFImageIO'],\n  ['TIFF', 'TIFFImageIO'],\n\n  ['vtk', 'VTKImageIO'],\n  ['VTK', 'VTKImageIO'],\n\n  ['isq', 'ScancoImageIO'],\n  ['ISQ', 'ScancoImageIO'],\n\n  ['fdf', 'FDFImageIO'],\n  ['FDF', 'FDFImageIO']\n])\n\nexport default extensionToIO\n","function getFileExtension (filePath: string): string {\n  let extension = filePath.slice((filePath.lastIndexOf('.') - 1 >>> 0) + 2)\n  if (extension.toLowerCase() === 'gz') {\n    const index = filePath.slice(0, -3).lastIndexOf('.')\n    extension = filePath.slice((index - 1 >>> 0) + 2)\n  } else if (extension.toLowerCase() === 'cbor') {\n    const index = filePath.slice(0, -5).lastIndexOf('.')\n    extension = filePath.slice((index - 1 >>> 0) + 2)\n  } else if (extension.toLowerCase() === 'zstd') {\n    // .iwi.cbor.zstd\n    const index = filePath.slice(0, -10).lastIndexOf('.')\n    extension = filePath.slice((index - 1 >>> 0) + 2)\n  } else if (extension.toLowerCase() === 'zip') {\n    const index = filePath.slice(0, -4).lastIndexOf('.')\n    extension = filePath.slice((index - 1 >>> 0) + 2)\n  }\n  return extension\n}\n\nexport default getFileExtension\n","const ImageIOIndex = ['PNGImageIO', 'MetaImageIO', 'TIFFImageIO', 'NiftiImageIO', 'JPEGImageIO', 'NrrdImageIO', 'VTKImageIO', 'BMPImageIO', 'HDF5ImageIO', 'MINCImageIO', 'MRCImageIO', 'LSMImageIO', 'MGHImageIO', 'BioRadImageIO', 'GiplImageIO', 'GEAdwImageIO', 'GE4ImageIO', 'GE5ImageIO', 'GDCMImageIO', 'ScancoImageIO', 'FDFImageIO', 'WASMImageIO', 'WASMZstdImageIO', ]\n\nexport default ImageIOIndex\n","const InterfaceTypes = {\n  // Todo: remove Interface prefix after IOTypes has been removed\n  TextFile: 'InterfaceTextFile',\n  BinaryFile: 'InterfaceBinaryFile',\n  TextStream: 'InterfaceTextStream',\n  BinaryStream: 'InterfaceBinaryStream',\n  Image: 'InterfaceImage',\n  Mesh: 'InterfaceMesh',\n  PolyData: 'InterfacePolyData'\n} as const\n\nexport default InterfaceTypes\n","const IOTypes = {\n  Text: 'Text',\n  Binary: 'Binary',\n  Image: 'Image',\n  Mesh: 'Mesh'\n} as const\n\nexport default IOTypes\n","const IntTypes = {\n  Int8: 'int8',\n  UInt8: 'uint8',\n  Int16: 'int16',\n  UInt16: 'uint16',\n  Int32: 'int32',\n  UInt32: 'uint32',\n  Int64: 'int64',\n  UInt64: 'uint64',\n\n  SizeValueType: 'uint64',\n  IdentifierType: 'uint64',\n  IndexValueType: 'int64',\n  OffsetValueType: 'int64'\n} as const\n\nexport default IntTypes\n","const FloatTypes = {\n  Float32: 'float32',\n  Float64: 'float64',\n\n  SpacePrecisionType: 'float64'\n} as const\n\nexport default FloatTypes\n","import IntTypes from './IntTypes.js'\nimport FloatTypes from './FloatTypes.js'\nimport type TypedArray from './TypedArray.js'\n\nfunction bufferToTypedArray (wasmType: typeof IntTypes[keyof typeof IntTypes] | typeof FloatTypes[keyof typeof FloatTypes] | 'null' | null, buffer: ArrayBuffer): null | TypedArray {\n  let typedArray: null | TypedArray = null\n  switch (wasmType) {\n    case IntTypes.UInt8: {\n      typedArray = new Uint8Array(buffer)\n      break\n    }\n    case IntTypes.Int8: {\n      typedArray = new Int8Array(buffer)\n      break\n    }\n    case IntTypes.UInt16: {\n      typedArray = new Uint16Array(buffer)\n      break\n    }\n    case IntTypes.Int16: {\n      typedArray = new Int16Array(buffer)\n      break\n    }\n    case IntTypes.UInt32: {\n      typedArray = new Uint32Array(buffer)\n      break\n    }\n    case IntTypes.Int32: {\n      typedArray = new Int32Array(buffer)\n      break\n    }\n    case IntTypes.UInt64: {\n      if (typeof globalThis.BigUint64Array === 'function') {\n        typedArray = new BigUint64Array(buffer)\n      } else {\n        // Sub with reasonable default. Will get cast to Uint8Array when\n        // transferred to WebAssembly.\n        typedArray = new Uint8Array(buffer)\n      }\n      break\n    }\n    case IntTypes.Int64: {\n      if (typeof globalThis.BigInt64Array === 'function') {\n        typedArray = new BigInt64Array(buffer)\n      } else {\n        // Sub with reasonable default. Will get cast to Uint8Array when\n        // transferred to WebAssembly.\n        typedArray = new Uint8Array(buffer)\n      }\n      break\n    }\n    case FloatTypes.Float32: {\n      typedArray = new Float32Array(buffer)\n      break\n    }\n    case FloatTypes.Float64: {\n      typedArray = new Float64Array(buffer)\n      break\n    }\n    case 'null': {\n      typedArray = null\n      break\n    }\n    case null: {\n      typedArray = null\n      break\n    }\n    default:\n      throw new Error('Type is not supported as a TypedArray')\n  }\n\n  return typedArray\n}\n\nexport default bufferToTypedArray\n","import InterfaceTypes from '../../core/InterfaceTypes.js'\nimport IOTypes from '../../core/IOTypes.js'\nimport bufferToTypedArray from '../../core/bufferToTypedArray.js'\nimport TypedArray from '../../core/TypedArray.js'\nimport TextStream from '../../core/TextStream.js'\nimport BinaryStream from '../../core/BinaryStream.js'\nimport TextFile from '../../core/TextFile.js'\nimport BinaryFile from '../../core/BinaryFile.js'\nimport Image from '../../core/Image.js'\nimport Mesh from '../../core/Mesh.js'\nimport PolyData from '../../core/PolyData.js'\nimport FloatTypes from '../../core/FloatTypes.js'\nimport IntTypes from '../../core/IntTypes.js'\n\nimport PipelineEmscriptenModule from '../PipelineEmscriptenModule.js'\nimport PipelineInput from '../PipelineInput.js'\nimport PipelineOutput from '../PipelineOutput.js'\nimport RunPipelineResult from '../RunPipelineResult.js'\n\nconst haveSharedArrayBuffer = typeof globalThis.SharedArrayBuffer === 'function'\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder('utf-8')\n\nfunction readFileSharedArray (emscriptenModule: PipelineEmscriptenModule, path: string): Uint8Array {\n  const opts = { flags: 'r', encoding: 'binary' }\n  const stream = emscriptenModule.fs_open(path, opts.flags)\n  const stat = emscriptenModule.fs_stat(path)\n  const length = stat.size\n  let arrayBufferData = null\n  if (haveSharedArrayBuffer) {\n    arrayBufferData = new SharedArrayBuffer(length) // eslint-disable-line\n  } else {\n    arrayBufferData = new ArrayBuffer(length)\n  }\n  const array = new Uint8Array(arrayBufferData)\n  emscriptenModule.fs_read(stream, array, 0, length, 0)\n  emscriptenModule.fs_close(stream)\n  return array\n}\n\nfunction memoryUint8SharedArray (emscriptenModule: PipelineEmscriptenModule, byteOffset: number, length: number): Uint8Array {\n  let arrayBufferData = null\n  if (haveSharedArrayBuffer) {\n    arrayBufferData = new SharedArrayBuffer(length) // eslint-disable-line\n  } else {\n    arrayBufferData = new ArrayBuffer(length)\n  }\n  const array = new Uint8Array(arrayBufferData)\n  const dataArrayView = new Uint8Array(emscriptenModule.HEAPU8.buffer, byteOffset, length)\n  array.set(dataArrayView)\n  return array\n}\n\nfunction setPipelineModuleInputArray (emscriptenModule: PipelineEmscriptenModule, dataArray: TypedArray | null, inputIndex: number, subIndex: number): number {\n  let dataPtr = 0\n  if (dataArray !== null) {\n    dataPtr = emscriptenModule.ccall('itk_wasm_input_array_alloc', 'number', ['number', 'number', 'number', 'number'], [0, inputIndex, subIndex, dataArray.buffer.byteLength])\n    emscriptenModule.HEAPU8.set(new Uint8Array(dataArray.buffer), dataPtr)\n  }\n  return dataPtr\n}\n\nfunction setPipelineModuleInputJSON (emscriptenModule: PipelineEmscriptenModule, dataObject: object, inputIndex: number): void {\n  const dataJSON = JSON.stringify(dataObject)\n  const jsonPtr = emscriptenModule.ccall('itk_wasm_input_json_alloc', 'number', ['number', 'number', 'number'], [0, inputIndex, dataJSON.length])\n  emscriptenModule.writeAsciiToMemory(dataJSON, jsonPtr, false)\n}\n\nfunction getPipelineModuleOutputArray (emscriptenModule: PipelineEmscriptenModule, outputIndex: number, subIndex: number, componentType: typeof IntTypes[keyof typeof IntTypes] | typeof FloatTypes[keyof typeof FloatTypes]): TypedArray | Float32Array | Uint32Array | null {\n  const dataPtr = emscriptenModule.ccall('itk_wasm_output_array_address', 'number', ['number', 'number', 'number'], [0, outputIndex, subIndex])\n  const dataSize = emscriptenModule.ccall('itk_wasm_output_array_size', 'number', ['number', 'number', 'number'], [0, outputIndex, subIndex])\n  const dataUint8 = memoryUint8SharedArray(emscriptenModule, dataPtr, dataSize)\n  const data = bufferToTypedArray(componentType, dataUint8.buffer)\n  return data\n}\n\nfunction getPipelineModuleOutputJSON (emscriptenModule: PipelineEmscriptenModule, outputIndex: number): object {\n  const jsonPtr = emscriptenModule.ccall('itk_wasm_output_json_address', 'number', ['number', 'number'], [0, outputIndex])\n  const dataJSON = emscriptenModule.AsciiToString(jsonPtr)\n  const dataObject = JSON.parse(dataJSON)\n  return dataObject\n}\n\nfunction runPipelineEmscripten (pipelineModule: PipelineEmscriptenModule, args: string[], outputs: PipelineOutput[] | null, inputs: PipelineInput[] | null): RunPipelineResult {\n  if (!(inputs == null) && inputs.length > 0) {\n    inputs.forEach(function (input, index) {\n      switch (input.type) {\n        case InterfaceTypes.TextStream:\n        {\n          const dataArray = encoder.encode((input.data as TextStream).data)\n          const arrayPtr = setPipelineModuleInputArray(pipelineModule, dataArray, index, 0)\n          const dataJSON = { size: dataArray.buffer.byteLength, data: `data:application/vnd.itk.address,0:${arrayPtr}` }\n          setPipelineModuleInputJSON(pipelineModule, dataJSON, index)\n          break\n        }\n        case InterfaceTypes.BinaryStream:\n        {\n          const dataArray = (input.data as BinaryStream).data\n          const arrayPtr = setPipelineModuleInputArray(pipelineModule, dataArray, index, 0)\n          const dataJSON = { size: dataArray.buffer.byteLength, data: `data:application/vnd.itk.address,0:${arrayPtr}` }\n          setPipelineModuleInputJSON(pipelineModule, dataJSON, index)\n          break\n        }\n        case InterfaceTypes.TextFile:\n        {\n          pipelineModule.fs_writeFile((input.data as TextFile).path, (input.data as TextFile).data)\n          break\n        }\n        case InterfaceTypes.BinaryFile:\n        {\n          pipelineModule.fs_writeFile((input.data as BinaryFile).path, (input.data as BinaryFile).data)\n          break\n        }\n        case InterfaceTypes.Image:\n        {\n          const image = input.data as Image\n          const dataPtr = setPipelineModuleInputArray(pipelineModule, image.data, index, 0)\n          const directionPtr = setPipelineModuleInputArray(pipelineModule, image.direction, index, 1)\n          const imageJSON = {\n            imageType: image.imageType,\n            name: image.name,\n            origin: image.origin,\n            spacing: image.spacing,\n            direction: `data:application/vnd.itk.address,0:${directionPtr}`,\n            size: image.size,\n            data: `data:application/vnd.itk.address,0:${dataPtr}`\n          }\n          setPipelineModuleInputJSON(pipelineModule, imageJSON, index)\n          break\n        }\n        case InterfaceTypes.Mesh:\n        {\n          const mesh = input.data as Mesh\n          const pointsPtr = setPipelineModuleInputArray(pipelineModule, mesh.points, index, 0)\n          const cellsPtr = setPipelineModuleInputArray(pipelineModule, mesh.cells, index, 1)\n          const pointDataPtr = setPipelineModuleInputArray(pipelineModule, mesh.pointData, index, 2)\n          const cellDataPtr = setPipelineModuleInputArray(pipelineModule, mesh.pointData, index, 3)\n          const meshJSON = {\n            meshType: mesh.meshType,\n            name: mesh.name,\n\n            numberOfPoints: mesh.numberOfPoints,\n            points: `data:application/vnd.itk.address,0:${pointsPtr}`,\n\n            numberOfCells: mesh.numberOfCells,\n            cells: `data:application/vnd.itk.address,0:${cellsPtr}`,\n            cellBufferSize: mesh.cellBufferSize,\n\n            numberOfPointPixels: mesh.numberOfPointPixels,\n            pointData: `data:application/vnd.itk.address,0:${pointDataPtr}`,\n\n            numberOfCellPixels: mesh.numberOfCellPixels,\n            cellData: `data:application/vnd.itk.address,0:${cellDataPtr}`\n          }\n          setPipelineModuleInputJSON(pipelineModule, meshJSON, index)\n          break\n        }\n        case InterfaceTypes.PolyData:\n        {\n          const polyData = input.data as PolyData\n          const pointsPtr = setPipelineModuleInputArray(pipelineModule, polyData.points, index, 0)\n          const verticesPtr = setPipelineModuleInputArray(pipelineModule, polyData.vertices, index, 1)\n          const linesPtr = setPipelineModuleInputArray(pipelineModule, polyData.lines, index, 2)\n          const polygonsPtr = setPipelineModuleInputArray(pipelineModule, polyData.polygons, index, 3)\n          const triangleStripsPtr = setPipelineModuleInputArray(pipelineModule, polyData.triangleStrips, index, 4)\n          const pointDataPtr = setPipelineModuleInputArray(pipelineModule, polyData.pointData, index, 5)\n          const cellDataPtr = setPipelineModuleInputArray(pipelineModule, polyData.pointData, index, 6)\n          const polyDataJSON = {\n            polyDataType: polyData.polyDataType,\n            name: polyData.name,\n\n            numberOfPoints: polyData.numberOfPoints,\n            points: `data:application/vnd.itk.address,0:${pointsPtr}`,\n\n            verticesBufferSize: polyData.verticesBufferSize,\n            vertices: `data:application/vnd.itk.address,0:${verticesPtr}`,\n\n            linesBufferSize: polyData.linesBufferSize,\n            lines: `data:application/vnd.itk.address,0:${linesPtr}`,\n\n            polygonsBufferSize: polyData.polygonsBufferSize,\n            polygons: `data:application/vnd.itk.address,0:${polygonsPtr}`,\n\n            triangleStripsBufferSize: polyData.triangleStripsBufferSize,\n            triangleStrips: `data:application/vnd.itk.address,0:${triangleStripsPtr}`,\n\n            numberOfPointPixels: polyData.numberOfPointPixels,\n            pointData: `data:application/vnd.itk.address,0:${pointDataPtr}`,\n\n            numberOfCellPixels: polyData.numberOfCellPixels,\n            cellData: `data:application/vnd.itk.address,0:${cellDataPtr}`\n          }\n          setPipelineModuleInputJSON(pipelineModule, polyDataJSON, index)\n          break\n        }\n        case IOTypes.Text:\n        {\n          pipelineModule.fs_writeFile(input.path as string, input.data as string)\n          break\n        }\n        case IOTypes.Binary:\n        {\n          pipelineModule.fs_writeFile(input.path as string, input.data as Uint8Array)\n          break\n        }\n        case IOTypes.Image:\n        {\n          const image = input.data as Image\n          const imageJSON = {\n            imageType: image.imageType,\n            name: image.name,\n            origin: image.origin,\n            spacing: image.spacing,\n            direction: 'data:application/vnd.itk.path,data/direction.raw',\n            size: image.size,\n            data: 'data:application/vnd.itk.path,data/data.raw'\n          }\n          pipelineModule.fs_mkdirs(`${input.path as string}/data`)\n          pipelineModule.fs_writeFile(`${input.path as string}/index.json`, JSON.stringify(imageJSON))\n          if (image.data === null) {\n            throw Error('image.data is null')\n          }\n          pipelineModule.fs_writeFile(`${input.path as string}/data/data.raw`, new Uint8Array(image.data.buffer))\n          pipelineModule.fs_writeFile(`${input.path as string}/data/direction.raw`, new Uint8Array(image.direction.buffer))\n          break\n        }\n        case IOTypes.Mesh:\n        {\n          const mesh = input.data as Mesh\n          const meshJSON = {\n            meshType: mesh.meshType,\n            name: mesh.name,\n\n            numberOfPoints: mesh.numberOfPoints,\n            points: 'data:application/vnd.itk.path,data/points.raw',\n\n            numberOfPointPixels: mesh.numberOfPointPixels,\n            pointData: 'data:application/vnd.itk.path,data/pointData.raw',\n\n            numberOfCells: mesh.numberOfCells,\n            cells: 'data:application/vnd.itk.path,data/cells.raw',\n\n            numberOfCellPixels: mesh.numberOfCellPixels,\n            cellData: 'data:application/vnd.itk.path,data/cellData.raw',\n            cellBufferSize: mesh.cellBufferSize\n\n          }\n          pipelineModule.fs_mkdirs(`${input.path as string}/data`)\n          pipelineModule.fs_writeFile(`${input.path as string}/index.json`, JSON.stringify(meshJSON))\n          if (meshJSON.numberOfPoints > 0) {\n            if (mesh.points === null) {\n              throw Error('mesh.points is null')\n            }\n            pipelineModule.fs_writeFile(`${input.path as string}/data/points.raw`, new Uint8Array(mesh.points.buffer))\n          }\n          if (meshJSON.numberOfPointPixels > 0) {\n            if (mesh.pointData === null) {\n              throw Error('mesh.pointData is null')\n            }\n            pipelineModule.fs_writeFile(`${input.path as string}/data/pointData.raw`, new Uint8Array(mesh.pointData.buffer))\n          }\n          if (meshJSON.numberOfCells > 0) {\n            if (mesh.cells === null) {\n              throw Error('mesh.cells is null')\n            }\n            pipelineModule.fs_writeFile(`${input.path as string}/data/cells.raw`, new Uint8Array(mesh.cells.buffer))\n          }\n          if (meshJSON.numberOfCellPixels > 0) {\n            if (mesh.cellData === null) {\n              throw Error('mesh.cellData is null')\n            }\n            pipelineModule.fs_writeFile(`${input.path as string}/data/cellData.raw`, new Uint8Array(mesh.cellData.buffer))\n          }\n          break\n        }\n        default:\n          throw Error('Unsupported input InterfaceType')\n      }\n    })\n  }\n\n  pipelineModule.resetModuleStdout()\n  pipelineModule.resetModuleStderr()\n  let returnValue = 0\n  try {\n    returnValue = pipelineModule.callMain(args)\n  } catch (exception) {\n    // Note: Module must be built with CMAKE_BUILD_TYPE set to Debug.\n    // e.g.: itk-wasm build my/project -- -DCMAKE_BUILD_TYPE:STRING=Debug\n    if (typeof exception === 'number') {\n      console.log('Exception while running pipeline:')\n      console.log('stdout:', pipelineModule.getModuleStdout())\n      console.error('stderr:', pipelineModule.getModuleStderr())\n      if (typeof pipelineModule.getExceptionMessage !== 'undefined') {\n        console.error('exception:', pipelineModule.getExceptionMessage(exception))\n      } else {\n        console.error('Build module in Debug mode for exception message information.')\n      }\n    }\n    throw exception\n  }\n  const stdout = pipelineModule.getModuleStdout()\n  const stderr = pipelineModule.getModuleStderr()\n\n  const populatedOutputs: PipelineOutput[] = []\n  if (!(outputs == null) && outputs.length > 0 && returnValue === 0) {\n    outputs.forEach(function (output, index) {\n      let outputData: any = null\n      switch (output.type) {\n        case InterfaceTypes.TextStream:\n        {\n          // const jsonPtr = pipelineModule.ccall('itk_wasm_output_json_address', 'number', ['number', 'number'], [0, index])\n          // const jsonSize = pipelineModule.ccall('itk_wasm_output_json_size', 'number', ['number', 'number'], [0, index])\n          // const jsonArray = pipelineModule.HEAPU8.slice(jsonPtr, jsonPtr + jsonSize)\n          // const dataJSON = JSON.parse(decoder.decode(jsonArray))\n          const dataPtr = pipelineModule.ccall('itk_wasm_output_array_address', 'number', ['number', 'number', 'number'], [0, index, 0])\n          const dataSize = pipelineModule.ccall('itk_wasm_output_array_size', 'number', ['number', 'number', 'number'], [0, index, 0])\n          const dataArrayView = new Uint8Array(pipelineModule.HEAPU8.buffer, dataPtr, dataSize)\n          outputData = { data: decoder.decode(dataArrayView) }\n          break\n        }\n        case InterfaceTypes.BinaryStream:\n        {\n          // const jsonPtr = pipelineModule.ccall('itk_wasm_output_json_address', 'number', ['number', 'number'], [0, index])\n          // const jsonSize = pipelineModule.ccall('itk_wasm_output_json_size', 'number', ['number', 'number'], [0, index])\n          // const jsonArray = pipelineModule.HEAPU8.slice(jsonPtr, jsonPtr + jsonSize)\n          // const dataJSON = JSON.parse(decoder.decode(jsonArray))\n          const dataPtr = pipelineModule.ccall('itk_wasm_output_array_address', 'number', ['number', 'number', 'number'], [0, index, 0])\n          const dataSize = pipelineModule.ccall('itk_wasm_output_array_size', 'number', ['number', 'number', 'number'], [0, index, 0])\n          outputData = { data: memoryUint8SharedArray(pipelineModule, dataPtr, dataSize) }\n          break\n        }\n        case InterfaceTypes.TextFile:\n        {\n          outputData = { path: (output.data as TextFile).path, data: pipelineModule.fs_readFile((output.data as TextFile).path, { encoding: 'utf8' }) as string }\n          break\n        }\n        case InterfaceTypes.BinaryFile:\n        {\n          outputData = { path: (output.data as BinaryFile).path, data: readFileSharedArray(pipelineModule, (output.data as BinaryFile).path) }\n          break\n        }\n        case InterfaceTypes.Image:\n        {\n          const image = getPipelineModuleOutputJSON(pipelineModule, index) as Image\n          image.data = getPipelineModuleOutputArray(pipelineModule, index, 0, image.imageType.componentType)\n          image.direction = getPipelineModuleOutputArray(pipelineModule, index, 1, FloatTypes.Float64) as Float64Array\n          outputData = image\n          break\n        }\n        case InterfaceTypes.Mesh:\n        {\n          const mesh = getPipelineModuleOutputJSON(pipelineModule, index) as Mesh\n          if (mesh.numberOfPoints > 0) {\n            mesh.points = getPipelineModuleOutputArray(pipelineModule, index, 0, mesh.meshType.pointComponentType)\n          } else {\n            mesh.points = bufferToTypedArray(mesh.meshType.pointComponentType, new ArrayBuffer(0))\n          }\n          if (mesh.numberOfCells > 0) {\n            mesh.cells = getPipelineModuleOutputArray(pipelineModule, index, 1, mesh.meshType.cellComponentType)\n          } else {\n            mesh.cells = bufferToTypedArray(mesh.meshType.cellComponentType, new ArrayBuffer(0))\n          }\n          if (mesh.numberOfPointPixels > 0) {\n            mesh.pointData = getPipelineModuleOutputArray(pipelineModule, index, 2, mesh.meshType.pointPixelComponentType)\n          } else {\n            mesh.pointData = bufferToTypedArray(mesh.meshType.pointPixelComponentType, new ArrayBuffer(0))\n          }\n          if (mesh.numberOfCellPixels > 0) {\n            mesh.cellData = getPipelineModuleOutputArray(pipelineModule, index, 3, mesh.meshType.cellPixelComponentType)\n          } else {\n            mesh.cellData = bufferToTypedArray(mesh.meshType.cellPixelComponentType, new ArrayBuffer(0))\n          }\n          outputData = mesh\n          break\n        }\n        case InterfaceTypes.PolyData:\n        {\n          const polyData = getPipelineModuleOutputJSON(pipelineModule, index) as PolyData\n          if (polyData.numberOfPoints > 0) {\n            polyData.points = getPipelineModuleOutputArray(pipelineModule, index, 0, FloatTypes.Float32) as Float32Array\n          } else {\n            polyData.points = new Float32Array()\n          }\n          if (polyData.verticesBufferSize > 0) {\n            polyData.vertices = getPipelineModuleOutputArray(pipelineModule, index, 1, IntTypes.UInt32) as Uint32Array\n          } else {\n            polyData.vertices = new Uint32Array()\n          }\n          if (polyData.linesBufferSize > 0) {\n            polyData.lines = getPipelineModuleOutputArray(pipelineModule, index, 2, IntTypes.UInt32) as Uint32Array\n          } else {\n            polyData.lines = new Uint32Array()\n          }\n          if (polyData.polygonsBufferSize > 0) {\n            polyData.polygons = getPipelineModuleOutputArray(pipelineModule, index, 3, IntTypes.UInt32) as Uint32Array\n          } else {\n            polyData.polygons = new Uint32Array()\n          }\n          if (polyData.triangleStripsBufferSize > 0) {\n            polyData.triangleStrips = getPipelineModuleOutputArray(pipelineModule, index, 4, IntTypes.UInt32) as Uint32Array\n          } else {\n            polyData.triangleStrips = new Uint32Array()\n          }\n          if (polyData.numberOfPointPixels > 0) {\n            polyData.pointData = getPipelineModuleOutputArray(pipelineModule, index, 5, polyData.polyDataType.pointPixelComponentType)\n          } else {\n            polyData.pointData = bufferToTypedArray(polyData.polyDataType.pointPixelComponentType, new ArrayBuffer(0))\n          }\n          if (polyData.numberOfCellPixels > 0) {\n            polyData.cellData = getPipelineModuleOutputArray(pipelineModule, index, 6, polyData.polyDataType.cellPixelComponentType)\n          } else {\n            polyData.cellData = bufferToTypedArray(polyData.polyDataType.cellPixelComponentType, new ArrayBuffer(0))\n          }\n          outputData = polyData\n          break\n        }\n        case IOTypes.Text:\n        {\n          if (typeof output.path === 'undefined') {\n            throw new Error('output.path not defined')\n          }\n          outputData = pipelineModule.fs_readFile(output.path, { encoding: 'utf8' }) as string\n          break\n        }\n        case IOTypes.Binary:\n        {\n          if (typeof output.path === 'undefined') {\n            throw new Error('output.path not defined')\n          }\n          outputData = readFileSharedArray(pipelineModule, output.path)\n          break\n        }\n        case IOTypes.Image:\n        {\n          if (typeof output.path === 'undefined') {\n            throw new Error('output.path not defined')\n          }\n          const imageJSON = pipelineModule.fs_readFile(`${output.path}/index.json`, { encoding: 'utf8' }) as string\n          const image = JSON.parse(imageJSON)\n          const dataUint8 = readFileSharedArray(pipelineModule, `${output.path}/data/data.raw`)\n          image.data = bufferToTypedArray(image.imageType.componentType, dataUint8.buffer)\n          const directionUint8 = readFileSharedArray(pipelineModule, `${output.path}/data/direction.raw`)\n          image.direction = bufferToTypedArray(FloatTypes.Float64, directionUint8.buffer)\n          outputData = image as Image\n          break\n        }\n        case IOTypes.Mesh:\n        {\n          if (typeof output.path === 'undefined') {\n            throw new Error('output.path not defined')\n          }\n          const meshJSON = pipelineModule.fs_readFile(`${output.path}/index.json`, { encoding: 'utf8' }) as string\n          const mesh = JSON.parse(meshJSON)\n          if (mesh.numberOfPoints > 0) {\n            const dataUint8Points = readFileSharedArray(pipelineModule, `${output.path}/data/points.raw`)\n            mesh.points = bufferToTypedArray(mesh.meshType.pointComponentType, dataUint8Points.buffer)\n          } else {\n            mesh.points = bufferToTypedArray(mesh.meshType.pointComponentType, new ArrayBuffer(0))\n          }\n          if (mesh.numberOfPointPixels > 0) {\n            const dataUint8PointData = readFileSharedArray(pipelineModule, `${output.path}/data/pointData.raw`)\n            mesh.pointData = bufferToTypedArray(mesh.meshType.pointPixelComponentType, dataUint8PointData.buffer)\n          } else {\n            mesh.pointData = bufferToTypedArray(mesh.meshType.pointPixelComponentType, new ArrayBuffer(0))\n          }\n          if (mesh.numberOfCells > 0) {\n            const dataUint8Cells = readFileSharedArray(pipelineModule, `${output.path}/data/cells.raw`)\n            mesh.cells = bufferToTypedArray(mesh.meshType.cellComponentType, dataUint8Cells.buffer)\n          } else {\n            mesh.cells = bufferToTypedArray(mesh.meshType.cellComponentType, new ArrayBuffer(0))\n          }\n          if (mesh.numberOfCellPixels > 0) {\n            const dataUint8CellData = readFileSharedArray(pipelineModule, `${output.path}/data/cellData.raw`)\n            mesh.cellData = bufferToTypedArray(mesh.meshType.cellPixelComponentType, dataUint8CellData.buffer)\n          } else {\n            mesh.cellData = bufferToTypedArray(mesh.meshType.cellPixelComponentType, new ArrayBuffer(0))\n          }\n          outputData = mesh as Mesh\n          break\n        }\n        default:\n          throw Error('Unsupported output InterfaceType')\n      }\n      const populatedOutput = {\n        type: output.type,\n        data: outputData\n      }\n      populatedOutputs.push(populatedOutput)\n    })\n  }\n\n  return { returnValue, stdout, stderr, outputs: populatedOutputs }\n}\n\nexport default runPipelineEmscripten\n","import loadPipelineModule from './loadPipelineModule.js'\nimport IOInput from './IOInput.js'\nimport PipelineEmscriptenModule from '../pipeline/PipelineEmscriptenModule.js'\nimport mimeToIO from '../io/internal/MimeToImageIO.js'\nimport extensionToIO from '../io/extensionToImageIO.js'\nimport getFileExtension from '../io/getFileExtension.js'\nimport ImageIOIndex from '../io/internal/ImageIOIndex.js'\nimport runPipelineEmscripten from '../pipeline/internal/runPipelineEmscripten.js'\n\nasync function * availableIOModules (input: IOInput) {\n  for (let idx = 0; idx < ImageIOIndex.length; idx++) {\n    const trialIO = ImageIOIndex[idx] + 'ReadImage'\n    const ioModule = await loadPipelineModule(trialIO, input.config.imageIOUrl) as PipelineEmscriptenModule\n    yield ioModule\n  }\n}\n\nasync function loadImageIOPipelineModule(input: IOInput, postfix: string): Promise<PipelineEmscriptenModule> {\n  if (input.mimeType && mimeToIO.has(input.mimeType)) {\n    const io = mimeToIO.get(input.mimeType) + postfix\n    const ioModule = await loadPipelineModule(io, input.config.imageIOUrl)\n    return ioModule\n  }\n\n  const extension = getFileExtension(input.fileName)\n  if (extensionToIO.has(extension)) {\n    const io = extensionToIO.get(extension) + postfix\n    const ioModule = await loadPipelineModule(io, input.config.imageIOUrl)\n    return ioModule\n  }\n\n  for (let idx = 0; idx < ImageIOIndex.length; ++idx) {\n    let idx = 0\n    for await (const pipelineModule of availableIOModules(input)) {\n      try {\n        const { returnValue, outputs } = await runPipelineEmscripten(pipelineModule, input.args, input.outputs, input.inputs)\n        if (returnValue === 0) {\n          return pipelineModule\n        }\n      } catch (error) {\n        // continue\n      }\n      idx++\n    }\n  }\n\n  throw Error(`Could not find IO for: ${input.fileName}`)\n}\n\nexport default loadImageIOPipelineModule\n","const mimeToIO = new Map([\n])\n\nexport default mimeToIO\n","const extensionToIO = new Map([\n  ['vtk', 'VTKPolyDataMeshIO'],\n  ['VTK', 'VTKPolyDataMeshIO'],\n  ['byu', 'BYUMeshIO'],\n  ['BYU', 'BYUMeshIO'],\n  ['fsa', 'FreeSurferAsciiMeshIO'],\n  ['FSA', 'FreeSurferAsciiMeshIO'],\n  ['fsb', 'FreeSurferBinaryMeshIO'],\n  ['FSB', 'FreeSurferBinaryMeshIO'],\n  ['obj', 'OBJMeshIO'],\n  ['OBJ', 'OBJMeshIO'],\n  ['off', 'OFFMeshIO'],\n  ['OFF', 'OFFMeshIO'],\n  ['stl', 'STLMeshIO'],\n  ['STL', 'STLMeshIO'],\n  ['swc', 'SWCMeshIO'],\n  ['SWC', 'SWCMeshIO'],\n  ['iwm', 'WASMMeshIO'],\n  ['iwm.cbor', 'WASMMeshIO'],\n  ['iwm.cbor.zstd', 'WASMZstdMeshIO']\n])\n\nexport default extensionToIO\n","const MeshIOIndex = ['BYUMeshIO', 'FreeSurferAsciiMeshIO', 'FreeSurferBinaryMeshIO', 'OBJMeshIO', 'OFFMeshIO', 'STLMeshIO', 'SWCMeshIO', 'VTKPolyDataMeshIO', 'WASMMeshIO', 'WASMZstdMeshIO', ]\n\nexport default MeshIOIndex\n","import loadPipelineModule from './loadPipelineModule.js'\nimport IOInput from './IOInput.js'\nimport PipelineEmscriptenModule from '../pipeline/PipelineEmscriptenModule.js'\nimport mimeToIO from '../io/internal/MimeToMeshIO.js'\nimport extensionToIO from '../io/extensionToMeshIO.js'\nimport getFileExtension from '../io/getFileExtension.js'\nimport MeshIOIndex from '../io/internal/MeshIOIndex.js'\nimport runPipelineEmscripten from '../pipeline/internal/runPipelineEmscripten.js'\n\nasync function * availableIOModules (input: IOInput) {\n  for (let idx = 0; idx < MeshIOIndex.length; idx++) {\n    const trialIO = MeshIOIndex[idx] + 'ReadMesh'\n    const ioModule = await loadPipelineModule(trialIO, input.config.meshIOUrl) as PipelineEmscriptenModule\n    yield ioModule\n  }\n}\n\nasync function loadMeshIOPipelineModule(input: IOInput, postfix: string): Promise<PipelineEmscriptenModule> {\n  if (input.mimeType && mimeToIO.has(input.mimeType)) {\n    const io = mimeToIO.get(input.mimeType) + postfix\n    const ioModule = await loadPipelineModule(io, input.config.meshIOUrl)\n    return ioModule\n  }\n\n  const extension = getFileExtension(input.fileName)\n  if (extensionToIO.has(extension)) {\n    const io = extensionToIO.get(extension) + postfix\n    const ioModule = await loadPipelineModule(io, input.config.meshIOUrl)\n    return ioModule\n  }\n\n  for (let idx = 0; idx < MeshIOIndex.length; ++idx) {\n    let idx = 0\n    for await (const pipelineModule of availableIOModules(input)) {\n      try {\n        const { returnValue, outputs } = await runPipelineEmscripten(pipelineModule, input.args, input.outputs, input.inputs)\n        if (returnValue === 0) {\n          return pipelineModule\n        }\n      } catch (error) {\n        // continue\n      }\n      idx++\n    }\n  }\n\n  throw Error(`Could not find IO for: ${input.fileName}`)\n}\n\nexport default loadMeshIOPipelineModule\n","const haveSharedArrayBuffer = typeof globalThis.SharedArrayBuffer === 'function' // eslint-disable-line\n\nfunction getTransferable (data: any): null | ArrayBuffer {\n  let result: null | ArrayBuffer = null\n  if (data.buffer !== undefined) {\n    result = data.buffer as ArrayBuffer\n  } else if (data.byteLength !== undefined) {\n    result = data as ArrayBuffer\n  }\n  if (!!result && haveSharedArrayBuffer && result instanceof SharedArrayBuffer) { // eslint-disable-line\n    return null\n  }\n  return result\n}\n\nexport default getTransferable\n","import registerWebworker from 'webworker-promise/lib/register.js'\n\nimport loadPipelineModule from './loadPipelineModule.js'\nimport loadImageIOPipelineModule from './loadImageIOPipelineModule.js'\nimport loadMeshIOPipelineModule from './loadMeshIOPipelineModule.js'\nimport runPipeline from './runPipeline.js'\nimport RunPipelineInput from './RunPipelineInput.js'\nimport IOInput from './IOInput.js'\n\nregisterWebworker(async function (input: RunPipelineInput | IOInput) {\n  let pipelineModule = null\n  if (input.operation === 'runPipeline') {\n    pipelineModule = await loadPipelineModule(input.pipelinePath, input.config.pipelinesUrl)\n  } else if (input.operation === 'readImage') {\n    pipelineModule = await loadImageIOPipelineModule(input as IOInput, 'ReadImage')\n  } else if (input.operation === 'writeImage') {\n    pipelineModule = await loadImageIOPipelineModule(input as IOInput, 'WriteImage')\n  } else if (input.operation === 'readMesh') {\n    pipelineModule = await loadMeshIOPipelineModule(input as IOInput, 'ReadMesh')\n  } else if (input.operation === 'writeMesh') {\n    pipelineModule = await loadMeshIOPipelineModule(input as IOInput, 'WriteMesh')\n  } else if (input.operation === 'meshToPolyData') {\n    pipelineModule = await loadPipelineModule('MeshToPolyData', input.config.meshIOUrl)\n  } else if (input.operation === 'polyDataToMesh') {\n    pipelineModule = await loadPipelineModule('PolyDataToMesh', input.config.meshIOUrl)\n  } else if (input.operation === 'readDICOMImageSeries') {\n    pipelineModule = await loadPipelineModule('ReadImageDICOMFileSeries', input.config.imageIOUrl)\n  } else if (input.operation === 'readDICOMTags') {\n    pipelineModule = await loadPipelineModule('ReadDICOMTags', input.config.imageIOUrl)\n  } else {\n    throw new Error('Unknown worker operation')\n  }\n  return runPipeline(pipelineModule, input.args, input.outputs, input.inputs)\n})\n","import registerWebworker from 'webworker-promise/lib/register.js'\n\nimport PipelineEmscriptenModule from '../pipeline/PipelineEmscriptenModule.js'\nimport runPipelineEmscripten from '../pipeline/internal/runPipelineEmscripten.js'\nimport IOTypes from '../core/IOTypes.js'\nimport getTransferable from '../core/getTransferable.js'\n\nimport PipelineInput from '../pipeline/PipelineInput.js'\nimport PipelineOutput from '../pipeline/PipelineOutput.js'\n\nimport InterfaceTypes from '../core/InterfaceTypes.js'\nimport TextStream from '../core/TextStream.js'\nimport BinaryStream from '../core/BinaryStream.js'\nimport TextFile from '../core/TextFile.js'\nimport BinaryFile from '../core/BinaryFile.js'\nimport Image from '../core/Image.js'\nimport Mesh from '../core/Mesh.js'\nimport PolyData from '../core/PolyData.js'\nimport TypedArray from '../core/TypedArray.js'\nimport meshTransferables from '../core/internal/meshTransferables.js'\nimport polyDataTransferables from '../core/internal/polyDataTransferables.js'\n\nasync function runPipeline(pipelineModule: PipelineEmscriptenModule, args: string[], outputs: PipelineOutput[], inputs: PipelineInput[]) {\n  const result = runPipelineEmscripten(pipelineModule, args, outputs, inputs)\n\n  const transferables: ArrayBuffer[] = []\n  if (result.outputs) {\n    result.outputs.forEach(function (output) {\n      if (output.type === InterfaceTypes.BinaryStream || output.type === InterfaceTypes.BinaryFile) {\n        // Binary data\n        const binary = output.data as Uint8Array\n        const transferable = getTransferable(binary)\n        if (transferable) {\n          transferables.push(transferable)\n        }\n      } else if (output.type === InterfaceTypes.Image) {\n        // Image data\n        const image = output.data as Image\n        let transferable = getTransferable(image.data)\n        if (transferable) {\n          transferables.push(transferable)\n        }\n        transferable = getTransferable(image.direction)\n        if (transferable) {\n          transferables.push(transferable)\n        }\n      } else if (output.type === InterfaceTypes.Mesh) {\n        const mesh = output.data as Mesh\n        const mt = meshTransferables(mesh)\n        transferables.push(...mt)\n      } else if (output.type === InterfaceTypes.PolyData) {\n        const polyData = output.data as PolyData\n        const pt = polyDataTransferables(polyData)\n        transferables.push(...pt)\n      } else if (output.type === IOTypes.Binary) {\n        // Binary data\n        const binary = output.data as Uint8Array\n        const transferable = getTransferable(binary)\n        if (transferable) {\n          transferables.push(transferable)\n        }\n      } else if (output.type === IOTypes.Image) {\n        // Image data\n        const image = output.data as Image\n        let transferable = getTransferable(image.data)\n        if (transferable) {\n          transferables.push(transferable)\n        }\n        transferable = getTransferable(image.direction)\n        if (transferable) {\n          transferables.push(transferable)\n        }\n      } else if (output.type === IOTypes.Mesh) {\n        // Mesh data\n        const mesh = output.data as Mesh\n        if (mesh.points) {\n          const transferable = getTransferable(mesh.points)\n          if (transferable) {\n            transferables.push(transferable)\n          }\n        }\n        if (mesh.pointData) {\n          const transferable = getTransferable(mesh.pointData)\n          if (transferable) {\n            transferables.push(transferable)\n          }\n        }\n        if (mesh.cells) {\n          const transferable = getTransferable(mesh.cells)\n          if (transferable) {\n            transferables.push(transferable)\n          }\n        }\n        if (mesh.cellData) {\n          const transferable = getTransferable(mesh.cellData)\n          if (transferable) {\n            transferables.push(transferable)\n          }\n        }\n      }\n    })\n  }\n\n  return new registerWebworker.TransferableResponse(result, transferables)\n}\n\nexport default runPipeline","import Mesh from '../Mesh.js'\n\nfunction meshTransferables (mesh: Mesh): ArrayBuffer[] {\n  const transferables: ArrayBuffer[] = []\n  if (mesh.points != null) {\n    transferables.push(mesh.points.buffer)\n  }\n  if (mesh.pointData != null) {\n    transferables.push(mesh.pointData.buffer)\n  }\n  if (mesh.cells != null) {\n    transferables.push(mesh.cells.buffer)\n  }\n  if (mesh.cellData != null) {\n    transferables.push(mesh.cellData.buffer)\n  }\n\n  return transferables\n}\n\nexport default meshTransferables\n","import PolyData from '../PolyData.js'\n\nfunction polyDataTransferables (polyData: PolyData): ArrayBuffer[] {\n  const transferables: ArrayBuffer[] = []\n  if (polyData.points != null) {\n    transferables.push(polyData.points.buffer)\n  }\n  if (polyData.vertices != null) {\n    transferables.push(polyData.vertices.buffer)\n  }\n  if (polyData.lines != null) {\n    transferables.push(polyData.lines.buffer)\n  }\n  if (polyData.polygons != null) {\n    transferables.push(polyData.polygons.buffer)\n  }\n  if (polyData.triangleStrips != null) {\n    transferables.push(polyData.triangleStrips.buffer)\n  }\n  if (polyData.pointData != null) {\n    transferables.push(polyData.pointData.buffer)\n  }\n  if (polyData.cellData != null) {\n    transferables.push(polyData.cellData.buffer)\n  }\n\n  return transferables\n}\n\nexport default polyDataTransferables\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [174], () => (__webpack_require__(895)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".itk-wasm.min.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t895: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkitk\"] = self[\"webpackChunkitk\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["root","factory","exports","module","define","amd","self","deferred","next","pipelineToModule","Map","async","pipelinePath","baseUrl","moduleRelativePathOrURL","pipeline","pipelineModule","URL","href","has","set","modulePrefix","startsWith","endsWith","substring","length","wasmBinaryPath","wasmBinary","responseType","data","importScripts","moduleBaseName","replace","wrapperModule","get","filePath","extension","slice","lastIndexOf","toLowerCase","index","wasmType","buffer","typedArray","Uint8Array","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","globalThis","BigUint64Array","BigInt64Array","Float32Array","Float64Array","Error","haveSharedArrayBuffer","SharedArrayBuffer","encoder","TextEncoder","decoder","TextDecoder","readFileSharedArray","emscriptenModule","path","stream","fs_open","fs_stat","size","arrayBufferData","ArrayBuffer","array","fs_read","fs_close","memoryUint8SharedArray","byteOffset","dataArrayView","HEAPU8","setPipelineModuleInputArray","dataArray","inputIndex","subIndex","dataPtr","ccall","byteLength","setPipelineModuleInputJSON","dataObject","dataJSON","JSON","stringify","jsonPtr","writeAsciiToMemory","getPipelineModuleOutputArray","outputIndex","componentType","dataSize","dataUint8","getPipelineModuleOutputJSON","AsciiToString","parse","args","outputs","inputs","forEach","input","type","encode","arrayPtr","fs_writeFile","image","directionPtr","direction","imageJSON","imageType","name","origin","spacing","mesh","pointsPtr","points","cellsPtr","cells","pointDataPtr","pointData","cellDataPtr","meshJSON","meshType","numberOfPoints","numberOfCells","cellBufferSize","numberOfPointPixels","numberOfCellPixels","cellData","polyData","verticesPtr","vertices","linesPtr","lines","polygonsPtr","polygons","triangleStripsPtr","triangleStrips","polyDataJSON","polyDataType","verticesBufferSize","linesBufferSize","polygonsBufferSize","triangleStripsBufferSize","fs_mkdirs","resetModuleStdout","resetModuleStderr","returnValue","callMain","exception","console","log","getModuleStdout","error","getModuleStderr","getExceptionMessage","stdout","stderr","populatedOutputs","output","outputData","decode","fs_readFile","encoding","pointComponentType","cellComponentType","pointPixelComponentType","cellPixelComponentType","directionUint8","dataUint8Points","dataUint8PointData","dataUint8Cells","dataUint8CellData","populatedOutput","push","availableIOModules","idx","trialIO","ioModule","config","imageIOUrl","postfix","mimeType","io","fileName","meshIOUrl","result","undefined","operation","pipelinesUrl","transferables","binary","transferable","mt","pt","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","f","e","chunkId","Promise","all","reduce","promises","u","g","this","Function","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","location","document","currentScript","src","scripts","getElementsByTagName","p","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","then"],"sourceRoot":""}