import createWebWorkerPromise from '../core/internal/createWebWorkerPromise.js';
import InterfaceTypes from '../core/InterfaceTypes.js';
import meshTransferables from '../core/internal/meshTransferables.js';
import config from '../itkConfig.js';
async function meshToPolyData(webWorker, mesh) {
    let worker = webWorker;
    const { webworkerPromise, worker: usedWorker } = await createWebWorkerPromise(worker);
    worker = usedWorker;
    const args = ['0', '0', '--memory-io'];
    const outputs = [
        { type: InterfaceTypes.PolyData }
    ];
    const inputs = [
        { type: InterfaceTypes.Mesh, data: mesh }
    ];
    const transferables = meshTransferables(mesh);
    const result = await webworkerPromise.postMessage({
        operation: 'meshToPolyData',
        config: config,
        pipelinePath: 'MeshToPolyData',
        args,
        outputs,
        inputs
    }, transferables);
    return { polyData: result.outputs[0].data, webWorker: worker };
}
export default meshToPolyData;
//# sourceMappingURL=meshToPolyData.js.map