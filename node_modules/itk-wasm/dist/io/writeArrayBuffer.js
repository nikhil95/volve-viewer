import writeImageArrayBuffer from './writeImageArrayBuffer.js';
import writeMeshArrayBuffer from './writeMeshArrayBuffer.js';
import getFileExtension from './getFileExtension.js';
import extensionToMeshIO from './extensionToMeshIO.js';
import mimeToMeshIO from './internal/MimeToMeshIO.js';
async function writeArrayBuffer(webWorker, imageOrMesh, fileName, mimeType = '', useCompression = false) {
    if (typeof imageOrMesh === 'boolean') {
        throw new Error('useCompression is now the argument position in itk-wasm');
    }
    const extension = getFileExtension(fileName);
    const isMesh = !!extensionToMeshIO.has(extension) || !!mimeToMeshIO.has(mimeType);
    if (isMesh) {
        return await writeMeshArrayBuffer(webWorker, imageOrMesh, fileName, mimeType, { useCompression })
            .catch(async function () {
            if (webWorker != null) {
                webWorker.terminate();
            }
            return await writeImageArrayBuffer(null, imageOrMesh, fileName, mimeType, useCompression);
        });
    }
    else {
        return await writeImageArrayBuffer(webWorker, imageOrMesh, fileName, mimeType, useCompression);
    }
}
export default writeArrayBuffer;
//# sourceMappingURL=writeArrayBuffer.js.map