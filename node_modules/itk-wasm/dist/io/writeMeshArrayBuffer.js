import createWebWorkerPromise from '../core/internal/createWebWorkerPromise.js';
import config from '../itkConfig.js';
import InterfaceTypes from '../core/InterfaceTypes.js';
import meshTransferables from '../core/internal/meshTransferables.js';
async function writeMeshArrayBuffer(webWorker, mesh, fileName, mimeType, options) {
    if ('useCompression' in mesh || 'binaryFileType' in mesh) {
        throw new Error('options are now in the last argument position in itk-wasm');
    }
    let worker = webWorker;
    const { webworkerPromise, worker: usedWorker } = await createWebWorkerPromise(worker);
    worker = usedWorker;
    const filePath = `./${fileName}`;
    const args = ['0', filePath, '--memory-io', '--quiet'];
    if ((options === null || options === void 0 ? void 0 : options.useCompression) === true) {
        args.push('--use-compression');
    }
    if ((options === null || options === void 0 ? void 0 : options.binaryFileType) === true) {
        args.push('--binary-file-type');
    }
    const outputs = [
        { data: { path: filePath }, type: InterfaceTypes.BinaryFile }
    ];
    const inputs = [
        { type: InterfaceTypes.Mesh, data: mesh }
    ];
    const transferables = meshTransferables(mesh);
    const result = await webworkerPromise.postMessage({
        operation: 'writeMesh',
        config: config,
        mimeType,
        fileName,
        pipelinePath: 'WriteMesh',
        args,
        outputs,
        inputs
    }, transferables);
    return { arrayBuffer: result.outputs[0].data.data.buffer, webWorker: worker };
}
export default writeMeshArrayBuffer;
//# sourceMappingURL=writeMeshArrayBuffer.js.map