import createWebWorkerPromise from '../core/internal/createWebWorkerPromise.js';
import config from '../itkConfig.js';
import InterfaceTypes from '../core/InterfaceTypes.js';
async function readDICOMTagsArrayBuffer(webWorker, arrayBuffer, tags = null) {
    let worker = webWorker;
    const { webworkerPromise, worker: usedWorker } = await createWebWorkerPromise(worker);
    worker = usedWorker;
    const dataArray = new Uint8Array(arrayBuffer);
    const path = './file.dcm';
    const args = [path, '0', '--memory-io'];
    const inputs = [
        { type: InterfaceTypes.BinaryFile, data: { data: dataArray, path } }
    ];
    if (tags != null) {
        args.push('--tags-to-read');
        args.push('1');
        inputs.push({ type: InterfaceTypes.TextStream, data: { data: JSON.stringify({ tags: tags }) } });
    }
    const outputs = [
        { type: InterfaceTypes.TextStream }
    ];
    const result = await webworkerPromise.postMessage({
        operation: 'readDICOMTags',
        config: config,
        pipelinePath: 'ReadDICOMTags',
        args,
        outputs,
        inputs
    }, [arrayBuffer]);
    const tagsJSON = result.outputs[0].data.data;
    const tagsResult = JSON.parse(tagsJSON);
    const tagsMap = new Map(tagsResult.tags);
    return { tags: tagsMap, webWorker: worker };
}
export default readDICOMTagsArrayBuffer;
//# sourceMappingURL=readDICOMTagsArrayBuffer.js.map