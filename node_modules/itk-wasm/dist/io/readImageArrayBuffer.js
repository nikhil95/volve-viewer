import createWebWorkerPromise from '../core/internal/createWebWorkerPromise.js';
import InterfaceTypes from '../core/InterfaceTypes.js';
import config from '../itkConfig.js';
async function readImageArrayBuffer(webWorker, arrayBuffer, fileName, mimeType) {
    let worker = webWorker;
    const { webworkerPromise, worker: usedWorker } = await createWebWorkerPromise(worker);
    worker = usedWorker;
    const filePath = `./${fileName}`;
    const args = [filePath, '0', '--memory-io', '--quiet'];
    const outputs = [
        { type: InterfaceTypes.Image }
    ];
    const inputs = [
        { type: InterfaceTypes.BinaryFile, data: { path: filePath, data: new Uint8Array(arrayBuffer) } }
    ];
    const transferables = [arrayBuffer];
    const result = await webworkerPromise.postMessage({
        operation: 'readImage',
        config: config,
        mimeType,
        fileName,
        pipelinePath: 'ReadImage',
        args,
        outputs,
        inputs
    }, transferables);
    return { image: result.outputs[0].data, webWorker: worker };
}
export default readImageArrayBuffer;
//# sourceMappingURL=readImageArrayBuffer.js.map