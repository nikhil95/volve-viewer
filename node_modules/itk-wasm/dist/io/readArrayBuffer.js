import readImageArrayBuffer from './readImageArrayBuffer.js';
import readMeshArrayBuffer from './readMeshArrayBuffer.js';
import getFileExtension from './getFileExtension.js';
import extensionToMeshIO from './extensionToMeshIO.js';
import mimeToMeshIO from './internal/MimeToMeshIO.js';
async function readArrayBuffer(webWorker, arrayBuffer, fileName, mimeType) {
    const extension = getFileExtension(fileName);
    const isMesh = !!extensionToMeshIO.has(extension) || !!mimeToMeshIO.has(mimeType);
    if (isMesh) {
        return await readMeshArrayBuffer(webWorker, arrayBuffer, fileName, mimeType)
            .catch(async function () {
            if (webWorker !== null) {
                webWorker.terminate();
            }
            return await readImageArrayBuffer(null, arrayBuffer, fileName, mimeType);
        });
    }
    else {
        return await readImageArrayBuffer(webWorker, arrayBuffer, fileName, mimeType);
    }
}
export default readArrayBuffer;
//# sourceMappingURL=readArrayBuffer.js.map