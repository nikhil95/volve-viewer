{"ast":null,"code":"import _objectSpread from \"/home/kv/Desktop/Nikhil/VolView-4.0.0/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { VNavigationDrawer } from 'vuetify/lib';\nexport var RESIZE_CURSOR = 'ew-resize';\n/**\n * Events: onResize(width:Number)\n */\n\nexport default {\n  name: 'ResizableNavDrawer',\n  props: {\n    minWidth: Number,\n    maxWidth: Number,\n    width: Number,\n    handleSize: {\n      type: Number,\n      default: 4\n    }\n  },\n  data: function data() {\n    return {\n      internalWidth: this.width\n    };\n  },\n  computed: {\n    handleSizeCSS: function handleSizeCSS() {\n      return \"\".concat(this.handleSize, \"px\");\n    }\n  },\n  mounted: function mounted() {\n    this.oldCursor = '';\n    this.oldUserSelect = '';\n    this.setResizableStyles();\n    this.setEvents();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.clearEvents();\n    this.stopResize();\n  },\n  render: function render(h) {\n    // forwards slots, scoped slots, and more to v-navigation-drawer\n    return h(VNavigationDrawer, {\n      props: _objectSpread(_objectSpread({}, this.$attrs), {}, {\n        width: this.internalWidth\n      }),\n      on: this.$listeners,\n      scopedSlots: this.$scopedSlots,\n      ref: 'infoPane'\n    }, this.$slots.default);\n  },\n  methods: {\n    setResizableStyles: function setResizableStyles() {\n      // manual styling\n      var el = this.$refs.infoPane.$el.querySelector('.v-navigation-drawer__border'); // NOTE: width is not reactive to handle size\n\n      el.style.width = this.handleSizeCSS;\n      el.style.backgroundColor = 'transparent'; // NOTE: dynamically setting \"right\" won't update the border position\n\n      if ('right' in this.$attrs) {\n        el.style.borderLeft = '2px solid rgba(0, 0, 0, 0.24)';\n      } else {\n        el.style.borderRight = '2px solid rgba(0, 0, 0, 0.24)';\n      }\n\n      el.style.cursor = RESIZE_CURSOR;\n    },\n    setEvents: function setEvents() {\n      var el = this.$refs.infoPane.$el.querySelector('.v-navigation-drawer__border');\n      el.addEventListener('mousedown', this.startResize);\n    },\n    clearEvents: function clearEvents() {\n      var el = this.$refs.infoPane.$el.querySelector('.v-navigation-drawer__border');\n      el.removeEventListener('mousedown', this.startResize);\n      document.removeEventListener('mouseup', this.stopResize);\n    },\n    startResize: function startResize() {\n      this.$refs.infoPane.$el.style.transition = 'initial';\n      this.setCursor(RESIZE_CURSOR);\n      this.disableSelection();\n      document.addEventListener('mousemove', this.handleResize);\n      document.addEventListener('mouseup', this.stopResize);\n    },\n    stopResize: function stopResize() {\n      this.$refs.infoPane.$el.style.transition = '';\n      this.resetCursor();\n      this.resetSelection();\n      document.removeEventListener('mousemove', this.handleResize);\n    },\n    handleResize: function handleResize(evt) {\n      var width = 'right' in this.$attrs ? document.body.scrollWidth - evt.clientX : evt.clientX;\n      var min = this.minWidth || this.handleSize;\n      var max = this.maxWidth || Infinity;\n      this.internalWidth = Math.min(max, Math.max(min, width));\n      this.$emit('resize', this.internalWidth);\n    },\n    setCursor: function setCursor(cursor) {\n      this.oldCursor = document.body.style.cursor;\n      document.body.style.cursor = cursor;\n    },\n    resetCursor: function resetCursor() {\n      document.body.style.cursor = this.oldCursor;\n      this.oldCursor = '';\n    },\n    disableSelection: function disableSelection() {\n      this.oldUserSelect = document.body.style.userSelect;\n      document.body.style.userSelect = 'none';\n    },\n    resetSelection: function resetSelection() {\n      document.body.style.userSelect = this.oldUserSelect;\n      this.oldUserSelect = '';\n    }\n  }\n};","map":{"version":3,"mappings":";;AACA;AAEA;AAEA;AACA;AACA;;AACA;EACAA,0BADA;EAEAC;IACAC,gBADA;IAEAC,gBAFA;IAGAC,aAHA;IAIAC;MACAC,YADA;MAEAC;IAFA;EAJA,CAFA;EAYAC,IAZA,kBAYA;IACA;MACAC;IADA;EAGA,CAhBA;EAkBAC;IACAC,aADA,2BACA;MACA;IACA;EAHA,CAlBA;EAwBAC,OAxBA,qBAwBA;IACA;IACA;IAEA;IACA;EACA,CA9BA;EAgCAC,aAhCA,2BAgCA;IACA;IACA;EACA,CAnCA;EAqCAC,MArCA,kBAqCAC,CArCA,EAqCA;IACA;IACA,SACAC,iBADA,EAEA;MACAf,uCAGA,WAHA;QAIAG;MAJA,EADA;MAOAa,mBAPA;MAQAC,8BARA;MASAC;IATA,CAFA,EAaA,mBAbA;EAeA,CAtDA;EAwDAC;IACAC,kBADA,gCACA;MACA;MACA,+CACA,8BADA,EAFA,CAMA;;MACAC;MACAA,yCARA,CASA;;MACA;QACAA;MACA,CAFA,MAEA;QACAA;MACA;;MACAA;IACA,CAjBA;IAmBAC,SAnBA,uBAmBA;MACA,+CACA,8BADA;MAGAD;IACA,CAxBA;IA0BAE,WA1BA,yBA0BA;MACA,+CACA,8BADA;MAGAF;MACAG;IACA,CAhCA;IAkCAC,WAlCA,yBAkCA;MACA;MAEA;MACA;MACAD;MACAA;IACA,CAzCA;IA2CAE,UA3CA,wBA2CA;MACA;MAEA;MACA;MACAF;IACA,CAjDA;IAmDAG,YAnDA,wBAmDAC,GAnDA,EAmDA;MACA,YACA,yBACAJ,uCADA,GAEAI,WAHA;MAKA;MACA;MACA;MAEA;IACA,CA9DA;IAgEAC,SAhEA,qBAgEAC,MAhEA,EAgEA;MACA;MACAN;IACA,CAnEA;IAqEAO,WArEA,yBAqEA;MACAP;MACA;IACA,CAxEA;IA0EAQ,gBA1EA,8BA0EA;MACA;MACAR;IACA,CA7EA;IA+EAS,cA/EA,4BA+EA;MACAT;MACA;IACA;EAlFA;AAxDA","names":["name","props","minWidth","maxWidth","width","handleSize","type","default","data","internalWidth","computed","handleSizeCSS","mounted","beforeDestroy","render","h","VNavigationDrawer","on","scopedSlots","ref","methods","setResizableStyles","el","setEvents","clearEvents","document","startResize","stopResize","handleResize","evt","setCursor","cursor","resetCursor","disableSelection","resetSelection"],"sourceRoot":"src/components","sources":["ResizableNavDrawer.vue"],"sourcesContent":["<script>\nimport { VNavigationDrawer } from 'vuetify/lib';\n\nexport const RESIZE_CURSOR = 'ew-resize';\n\n/**\n * Events: onResize(width:Number)\n */\nexport default {\n  name: 'ResizableNavDrawer',\n  props: {\n    minWidth: Number,\n    maxWidth: Number,\n    width: Number,\n    handleSize: {\n      type: Number,\n      default: 4,\n    },\n  },\n\n  data() {\n    return {\n      internalWidth: this.width,\n    };\n  },\n\n  computed: {\n    handleSizeCSS() {\n      return `${this.handleSize}px`;\n    },\n  },\n\n  mounted() {\n    this.oldCursor = '';\n    this.oldUserSelect = '';\n\n    this.setResizableStyles();\n    this.setEvents();\n  },\n\n  beforeDestroy() {\n    this.clearEvents();\n    this.stopResize();\n  },\n\n  render(h) {\n    // forwards slots, scoped slots, and more to v-navigation-drawer\n    return h(\n      VNavigationDrawer,\n      {\n        props: {\n          // this.$attrs is the non-prop attrs we receive, which should\n          // be forwarded to v-navigation-drawer\n          ...this.$attrs,\n          width: this.internalWidth,\n        },\n        on: this.$listeners,\n        scopedSlots: this.$scopedSlots,\n        ref: 'infoPane',\n      },\n      this.$slots.default\n    );\n  },\n\n  methods: {\n    setResizableStyles() {\n      // manual styling\n      const el = this.$refs.infoPane.$el.querySelector(\n        '.v-navigation-drawer__border'\n      );\n\n      // NOTE: width is not reactive to handle size\n      el.style.width = this.handleSizeCSS;\n      el.style.backgroundColor = 'transparent';\n      // NOTE: dynamically setting \"right\" won't update the border position\n      if ('right' in this.$attrs) {\n        el.style.borderLeft = '2px solid rgba(0, 0, 0, 0.24)';\n      } else {\n        el.style.borderRight = '2px solid rgba(0, 0, 0, 0.24)';\n      }\n      el.style.cursor = RESIZE_CURSOR;\n    },\n\n    setEvents() {\n      const el = this.$refs.infoPane.$el.querySelector(\n        '.v-navigation-drawer__border'\n      );\n      el.addEventListener('mousedown', this.startResize);\n    },\n\n    clearEvents() {\n      const el = this.$refs.infoPane.$el.querySelector(\n        '.v-navigation-drawer__border'\n      );\n      el.removeEventListener('mousedown', this.startResize);\n      document.removeEventListener('mouseup', this.stopResize);\n    },\n\n    startResize() {\n      this.$refs.infoPane.$el.style.transition = 'initial';\n\n      this.setCursor(RESIZE_CURSOR);\n      this.disableSelection();\n      document.addEventListener('mousemove', this.handleResize);\n      document.addEventListener('mouseup', this.stopResize);\n    },\n\n    stopResize() {\n      this.$refs.infoPane.$el.style.transition = '';\n\n      this.resetCursor();\n      this.resetSelection();\n      document.removeEventListener('mousemove', this.handleResize);\n    },\n\n    handleResize(evt) {\n      const width =\n        'right' in this.$attrs\n          ? document.body.scrollWidth - evt.clientX\n          : evt.clientX;\n\n      const min = this.minWidth || this.handleSize;\n      const max = this.maxWidth || Infinity;\n      this.internalWidth = Math.min(max, Math.max(min, width));\n\n      this.$emit('resize', this.internalWidth);\n    },\n\n    setCursor(cursor) {\n      this.oldCursor = document.body.style.cursor;\n      document.body.style.cursor = cursor;\n    },\n\n    resetCursor() {\n      document.body.style.cursor = this.oldCursor;\n      this.oldCursor = '';\n    },\n\n    disableSelection() {\n      this.oldUserSelect = document.body.style.userSelect;\n      document.body.style.userSelect = 'none';\n    },\n\n    resetSelection() {\n      document.body.style.userSelect = this.oldUserSelect;\n      this.oldUserSelect = '';\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}