{"ast":null,"code":"import _classCallCheck from \"/home/kv/Desktop/Nikhil/VolView-4.0.0/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/kv/Desktop/Nikhil/VolView-4.0.0/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n\nvar WorkerHandler = /*#__PURE__*/function () {\n  function WorkerHandler() {\n    _classCallCheck(this, WorkerHandler);\n\n    this.handler = null;\n    onmessage = this.preHandler.bind(this);\n  }\n\n  _createClass(WorkerHandler, [{\n    key: \"registerHandler\",\n    value: function registerHandler(func) {\n      this.handler = func;\n    }\n  }, {\n    key: \"preHandler\",\n    value: function preHandler(ev) {\n      if (this.handler) {\n        var _ev$data = ev.data,\n            id = _ev$data.id,\n            message = _ev$data.message;\n        var transferables = [];\n\n        var setTransferables = function setTransferables(iter) {\n          transferables = Array.from(iter);\n        };\n\n        try {\n          Promise.resolve(this.handler(message, setTransferables)).then(function (result) {\n            var msg = {\n              id: id,\n              message: result\n            };\n            postMessage(msg, transferables);\n          });\n        } catch (error) {\n          var msg = {\n            id: id,\n            error: error.message\n          };\n          postMessage(msg);\n        }\n      }\n    }\n  }]);\n\n  return WorkerHandler;\n}(); // To be used inside the worker\n\n\nexport default new WorkerHandler();","map":{"version":3,"names":["WorkerHandler","handler","onmessage","preHandler","bind","func","ev","data","id","message","transferables","setTransferables","iter","Array","from","Promise","resolve","then","result","msg","postMessage","error"],"sources":["/home/kv/Desktop/Nikhil/VolView-4.0.0/src/utils/workerHandler.js"],"sourcesContent":["class WorkerHandler {\n  constructor() {\n    this.handler = null;\n    onmessage = this.preHandler.bind(this);\n  }\n\n  registerHandler(func) {\n    this.handler = func;\n  }\n\n  preHandler(ev) {\n    if (this.handler) {\n      const { id, message } = ev.data;\n\n      let transferables = [];\n      const setTransferables = (iter) => {\n        transferables = Array.from(iter);\n      };\n\n      try {\n        Promise.resolve(this.handler(message, setTransferables)).then(\n          (result) => {\n            const msg = {\n              id,\n              message: result,\n            };\n            postMessage(msg, transferables);\n          }\n        );\n      } catch (error) {\n        const msg = {\n          id,\n          error: error.message,\n        };\n        postMessage(msg);\n      }\n    }\n  }\n}\n\n// To be used inside the worker\nexport default new WorkerHandler();\n"],"mappings":";;;;;;IAAMA,a;EACJ,yBAAc;IAAA;;IACZ,KAAKC,OAAL,GAAe,IAAf;IACAC,SAAS,GAAG,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAZ;EACD;;;;WAED,yBAAgBC,IAAhB,EAAsB;MACpB,KAAKJ,OAAL,GAAeI,IAAf;IACD;;;WAED,oBAAWC,EAAX,EAAe;MACb,IAAI,KAAKL,OAAT,EAAkB;QAChB,eAAwBK,EAAE,CAACC,IAA3B;QAAA,IAAQC,EAAR,YAAQA,EAAR;QAAA,IAAYC,OAAZ,YAAYA,OAAZ;QAEA,IAAIC,aAAa,GAAG,EAApB;;QACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;UACjCF,aAAa,GAAGG,KAAK,CAACC,IAAN,CAAWF,IAAX,CAAhB;QACD,CAFD;;QAIA,IAAI;UACFG,OAAO,CAACC,OAAR,CAAgB,KAAKf,OAAL,CAAaQ,OAAb,EAAsBE,gBAAtB,CAAhB,EAAyDM,IAAzD,CACE,UAACC,MAAD,EAAY;YACV,IAAMC,GAAG,GAAG;cACVX,EAAE,EAAFA,EADU;cAEVC,OAAO,EAAES;YAFC,CAAZ;YAIAE,WAAW,CAACD,GAAD,EAAMT,aAAN,CAAX;UACD,CAPH;QASD,CAVD,CAUE,OAAOW,KAAP,EAAc;UACd,IAAMF,GAAG,GAAG;YACVX,EAAE,EAAFA,EADU;YAEVa,KAAK,EAAEA,KAAK,CAACZ;UAFH,CAAZ;UAIAW,WAAW,CAACD,GAAD,CAAX;QACD;MACF;IACF;;;;KAGH;;;AACA,eAAe,IAAInB,aAAJ,EAAf"},"metadata":{},"sourceType":"module"}