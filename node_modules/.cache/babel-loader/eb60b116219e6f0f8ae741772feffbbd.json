{"ast":null,"code":"import _slicedToArray from \"/home/kv/Desktop/Nikhil/VolView-4.0.0/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/home/kv/Desktop/Nikhil/VolView-4.0.0/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport macro from '@kitware/vtk.js/macro';\nimport vtkView2DProxy from '@kitware/vtk.js/Proxy/Core/View2DProxy';\nimport { commonViewCustomizations } from '@/src/vtk/LPSView3DProxy';\n\nfunction vtkLPSView2DProxy(publicAPI, model) {\n  model.classHierarchy.push('vtkLPSView2DProxy');\n\n  var superClass = _objectSpread({}, publicAPI);\n\n  commonViewCustomizations(publicAPI, model); // override; we will set the manipulator ourselves\n\n  publicAPI.bindRepresentationToManipulator = function () {}; // override reset camera to /just/ reset the camera\n\n\n  publicAPI.resetCamera = function () {\n    var boundsToUse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    model.renderer.resetCamera(boundsToUse);\n  }; // override addRepresentation\n\n\n  publicAPI.addRepresentation = function (rep) {\n    superClass.addRepresentation(rep);\n\n    if (rep.setSlicingMode && model.slicingMode) {\n      rep.setSlicingMode(model.slicingMode);\n    }\n  }; // this basically ignores model.axis\n\n\n  publicAPI.setSlicingMode = function (mode) {\n    if (superClass.setSlicingMode(mode) && mode) {\n      var count = model.representations.length;\n\n      while (count--) {\n        var rep = model.representations[count];\n\n        if (rep.setSlicingMode) {\n          rep.setSlicingMode(mode);\n        }\n      }\n    }\n  };\n\n  publicAPI.resizeToFit = function (lookAxis, viewUpAxis, dims) {\n    var _model$openglRenderWi = model.openglRenderWindow.getSize(),\n        _model$openglRenderWi2 = _slicedToArray(_model$openglRenderWi, 2),\n        w = _model$openglRenderWi2[0],\n        h = _model$openglRenderWi2[1];\n\n    var bw;\n    var bh;\n\n    if (lookAxis === 0 && viewUpAxis === 1) {\n      var _dims = _slicedToArray(dims, 3);\n\n      bh = _dims[1];\n      bw = _dims[2];\n    } else if (lookAxis === 0 && viewUpAxis === 2) {\n      var _dims2 = _slicedToArray(dims, 3);\n\n      bw = _dims2[1];\n      bh = _dims2[2];\n    } else if (lookAxis === 1 && viewUpAxis === 0) {\n      var _dims3 = _slicedToArray(dims, 3);\n\n      bh = _dims3[0];\n      bw = _dims3[2];\n    } else if (lookAxis === 1 && viewUpAxis === 2) {\n      var _dims4 = _slicedToArray(dims, 3);\n\n      bw = _dims4[0];\n      bh = _dims4[2];\n    } else if (lookAxis === 2 && viewUpAxis === 0) {\n      var _dims5 = _slicedToArray(dims, 2);\n\n      bh = _dims5[0];\n      bw = _dims5[1];\n    } else if (lookAxis === 2 && viewUpAxis === 1) {\n      var _dims6 = _slicedToArray(dims, 2);\n\n      bw = _dims6[0];\n      bh = _dims6[1];\n    }\n\n    var viewAspect = w / h;\n    var boundsAspect = bw / bh;\n    var scale = 0;\n\n    if (viewAspect >= boundsAspect) {\n      scale = bh / 2;\n    } else {\n      scale = bw / 2 / viewAspect;\n    }\n\n    model.camera.setParallelScale(scale);\n  };\n}\n\nvar DEFAULT_VALUES = {\n  slicingMode: null // XYZIJK. Null means fallback to model.axis.\n\n};\nexport function extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, initialValues, DEFAULT_VALUES); // slicing mode overrides axis\n\n  macro.setGet(publicAPI, model, ['slicingMode']);\n  vtkView2DProxy.extend(publicAPI, model, initialValues);\n  vtkLPSView2DProxy(publicAPI, model);\n}\nexport var newInstance = macro.newInstance(extend, 'vtkLPSView2DProxy');\nexport default {\n  newInstance: newInstance,\n  extend: extend\n};","map":{"version":3,"names":["macro","vtkView2DProxy","commonViewCustomizations","vtkLPSView2DProxy","publicAPI","model","classHierarchy","push","superClass","bindRepresentationToManipulator","resetCamera","boundsToUse","renderer","addRepresentation","rep","setSlicingMode","slicingMode","mode","count","representations","length","resizeToFit","lookAxis","viewUpAxis","dims","openglRenderWindow","getSize","w","h","bw","bh","viewAspect","boundsAspect","scale","camera","setParallelScale","DEFAULT_VALUES","extend","initialValues","Object","assign","setGet","newInstance"],"sources":["/home/kv/Desktop/Nikhil/VolView-4.0.0/src/vtk/LPSView2DProxy/index.js"],"sourcesContent":["import macro from '@kitware/vtk.js/macro';\nimport vtkView2DProxy from '@kitware/vtk.js/Proxy/Core/View2DProxy';\n\nimport { commonViewCustomizations } from '@/src/vtk/LPSView3DProxy';\n\nfunction vtkLPSView2DProxy(publicAPI, model) {\n  model.classHierarchy.push('vtkLPSView2DProxy');\n  const superClass = { ...publicAPI };\n\n  commonViewCustomizations(publicAPI, model);\n\n  // override; we will set the manipulator ourselves\n  publicAPI.bindRepresentationToManipulator = () => {};\n\n  // override reset camera to /just/ reset the camera\n  publicAPI.resetCamera = (boundsToUse = null) => {\n    model.renderer.resetCamera(boundsToUse);\n  };\n\n  // override addRepresentation\n  publicAPI.addRepresentation = (rep) => {\n    superClass.addRepresentation(rep);\n    if (rep.setSlicingMode && model.slicingMode) {\n      rep.setSlicingMode(model.slicingMode);\n    }\n  };\n\n  // this basically ignores model.axis\n  publicAPI.setSlicingMode = (mode) => {\n    if (superClass.setSlicingMode(mode) && mode) {\n      let count = model.representations.length;\n      while (count--) {\n        const rep = model.representations[count];\n        if (rep.setSlicingMode) {\n          rep.setSlicingMode(mode);\n        }\n      }\n    }\n  };\n\n  publicAPI.resizeToFit = (lookAxis, viewUpAxis, dims) => {\n    const [w, h] = model.openglRenderWindow.getSize();\n    let bw;\n    let bh;\n    if (lookAxis === 0 && viewUpAxis === 1) {\n      [, bh, bw] = dims;\n    } else if (lookAxis === 0 && viewUpAxis === 2) {\n      [, bw, bh] = dims;\n    } else if (lookAxis === 1 && viewUpAxis === 0) {\n      [bh, , bw] = dims;\n    } else if (lookAxis === 1 && viewUpAxis === 2) {\n      [bw, , bh] = dims;\n    } else if (lookAxis === 2 && viewUpAxis === 0) {\n      [bh, bw] = dims;\n    } else if (lookAxis === 2 && viewUpAxis === 1) {\n      [bw, bh] = dims;\n    }\n\n    const viewAspect = w / h;\n    const boundsAspect = bw / bh;\n    let scale = 0;\n    if (viewAspect >= boundsAspect) {\n      scale = bh / 2;\n    } else {\n      scale = bw / 2 / viewAspect;\n    }\n\n    model.camera.setParallelScale(scale);\n  };\n}\n\nconst DEFAULT_VALUES = {\n  slicingMode: null, // XYZIJK. Null means fallback to model.axis.\n};\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, initialValues, DEFAULT_VALUES);\n\n  // slicing mode overrides axis\n  macro.setGet(publicAPI, model, ['slicingMode']);\n\n  vtkView2DProxy.extend(publicAPI, model, initialValues);\n\n  vtkLPSView2DProxy(publicAPI, model);\n}\n\nexport const newInstance = macro.newInstance(extend, 'vtkLPSView2DProxy');\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}