{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'ToolButton',\n  props: {\n    icon: {\n      type: String,\n      required: true\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    size: {\n      type: [Number, String],\n      default: 40\n    },\n    buttonClass: [String, Array, Object]\n  },\n  computed: {\n    sizeV: function sizeV() {\n      return Number(this.size);\n    },\n    iconSize: function iconSize() {\n      return Math.floor(0.6 * this.sizeV);\n    },\n    classV: function classV() {\n      var _this = this;\n\n      var classSpec = this.buttonClass;\n\n      if (typeof classSpec === 'string') {\n        return classSpec;\n      }\n\n      if (Array.isArray(classSpec)) {\n        return classSpec.join(' ');\n      }\n\n      if (classSpec && Object.keys(classSpec).length) {\n        return Object.keys(this.buttonClass).filter(function (key) {\n          return _this.buttonClass[key];\n        }).join(' ');\n      }\n\n      return '';\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;EACAA,kBADA;EAEAC;IACAC;MAAAC;MAAAC;IAAA,CADA;IAEAJ;MAAAG;MAAAC;IAAA,CAFA;IAGAC;MAAAF;MAAAG;IAAA,CAHA;IAIAC;EAJA,CAFA;EASAC;IACAC,KADA,mBACA;MACA;IACA,CAHA;IAIAC,QAJA,sBAIA;MACA;IACA,CANA;IAOAC,MAPA,oBAOA;MAAA;;MACA;;MACA;QACA;MACA;;MACA;QACA;MACA;;MACA;QACA,qCACAC,MADA,CACA;UAAA;QAAA,CADA,EAEAC,IAFA,CAEA,GAFA;MAGA;;MACA;IACA;EArBA;AATA","names":["name","props","icon","type","required","size","default","buttonClass","computed","sizeV","iconSize","classV","filter","join"],"sourceRoot":"src/components","sources":["ToolButton.vue"],"sourcesContent":["<template>\n  <v-tooltip right transition=\"slide-x-transition\">\n    <template v-slot:activator=\"{ on }\">\n      <v-btn\n        text\n        tile\n        dark\n        :height=\"sizeV\"\n        :width=\"sizeV\"\n        :min-width=\"sizeV\"\n        :max-width=\"sizeV\"\n        :class=\"classV\"\n        v-bind=\"$attrs\"\n        v-on=\"{ ...on, ...$listeners }\"\n      >\n        <v-icon :size=\"iconSize\">{{ icon }}</v-icon>\n        <slot />\n      </v-btn>\n    </template>\n    <span>{{ name }}</span>\n  </v-tooltip>\n</template>\n\n<script>\nexport default {\n  name: 'ToolButton',\n  props: {\n    icon: { type: String, required: true },\n    name: { type: String, required: true },\n    size: { type: [Number, String], default: 40 },\n    buttonClass: [String, Array, Object],\n  },\n\n  computed: {\n    sizeV() {\n      return Number(this.size);\n    },\n    iconSize() {\n      return Math.floor(0.6 * this.sizeV);\n    },\n    classV() {\n      const classSpec = this.buttonClass;\n      if (typeof classSpec === 'string') {\n        return classSpec;\n      }\n      if (Array.isArray(classSpec)) {\n        return classSpec.join(' ');\n      }\n      if (classSpec && Object.keys(classSpec).length) {\n        return Object.keys(this.buttonClass)\n          .filter((key) => this.buttonClass[key])\n          .join(' ');\n      }\n      return '';\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}