{"ast":null,"code":"import _slicedToArray from \"/home/kv/Desktop/Nikhil/VolView-4.0.0/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/home/kv/Desktop/Nikhil/VolView-4.0.0/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.typed-array.uint16-array.js\";\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkActor2D from '@kitware/vtk.js/Rendering/Core/Actor2D';\nimport vtkContextRepresentation from '@kitware/vtk.js/Widgets/Representations/ContextRepresentation';\nimport vtkWidgetRepresentation from '@kitware/vtk.js/Widgets/Representations/WidgetRepresentation';\nimport macro from '@kitware/vtk.js/macros';\nimport vtkMapper2D from '@kitware/vtk.js/Rendering/Core/Mapper2D';\nimport vtkCoordinate from '@kitware/vtk.js/Rendering/Core/Coordinate';\nimport { Coordinate } from '@kitware/vtk.js/Rendering/Core/Coordinate/Constants';\nimport { Representation } from '@kitware/vtk.js/Rendering/Core/Property/Constants';\nimport { DisplayLocation } from '@kitware/vtk.js/Rendering/Core/Property2D/Constants';\nimport { vec3 } from 'gl-matrix';\nimport { rescaleStamp } from '@/src/core/tools/paint';\n\nfunction generateContour(_ref) {\n  var initialStamp = _ref.stamp,\n      location = _ref.location,\n      slicingIndex = _ref.slicingIndex,\n      indexToWorld = _ref.indexToWorld,\n      imageSpacing = _ref.imageSpacing;\n\n  var sliceSpacing = _toConsumableArray(imageSpacing);\n\n  sliceSpacing.splice(slicingIndex, 1);\n  var stamp = rescaleStamp(initialStamp, sliceSpacing, true);\n\n  var _stamp$size = _slicedToArray(stamp.size, 2),\n      xdim = _stamp$size[0],\n      ydim = _stamp$size[1];\n\n  var xoffset = Math.floor((xdim - 1) / 2);\n  var yoffset = Math.floor((ydim - 1) / 2); // grid of corner points (top-left to bottom-right)\n\n  var gridxdim = xdim + 1;\n  var gridydim = ydim + 1;\n  var vertices = []; // arr of 3-tuples\n\n  var lines = []; // arr of 2-tuples of vertex indices\n  // maps grid x/y to vertex index\n\n  var vertexMap = {};\n\n  var getOrCreateVertexIndex = function getOrCreateVertexIndex(x, y) {\n    var key = \"\".concat(x, \",\").concat(y);\n\n    if (key in vertexMap) {\n      return vertexMap[key];\n    }\n\n    var indexCoords = _toConsumableArray(location).map(function (val) {\n      return Math.round(val);\n    });\n\n    if (slicingIndex === 0) {\n      indexCoords[1] += x - xoffset - 0.5;\n      indexCoords[2] += y - yoffset - 0.5;\n    } else if (slicingIndex === 1) {\n      indexCoords[0] += x - xoffset - 0.5;\n      indexCoords[2] += y - yoffset - 0.5;\n    } else if (slicingIndex === 2) {\n      indexCoords[0] += x - xoffset - 0.5;\n      indexCoords[1] += y - yoffset - 0.5;\n    } // get the grid point x/y's actual vertex in world space\n    // since grid x/y represents the top-left of the actual pixel\n    // at x/y, the true continuous index value of the vertex\n    // is x-0.5/y-0.5.\n\n\n    var worldCoords = [];\n    vec3.transformMat4(worldCoords, indexCoords, indexToWorld);\n    vertices.push(worldCoords);\n    var index = vertices.length - 1;\n    vertexMap[key] = index;\n    return index;\n  };\n\n  var getStampPixelAt = function getStampPixelAt(x, y) {\n    if (x < 0 || x >= xdim) return 0;\n    if (y < 0 || y >= ydim) return 0;\n    return stamp.pixels[y * xdim + x] || 0;\n  };\n\n  for (var gy = 0; gy < gridydim; gy++) {\n    for (var gx = 0; gx < gridxdim; gx++) {\n      // evaluate point to see if it needs inclusion\n      // by looking at all 4 pixels that share this point\n      // as a corner.\n      // if all empty or all filled, the current point is\n      // not used in the contour.\n      var count = getStampPixelAt(gx, gy) + getStampPixelAt(gx - 1, gy) + getStampPixelAt(gx, gy - 1) + getStampPixelAt(gx - 1, gy - 1);\n\n      if (count > 0 && count < 4) {\n        var v0 = getOrCreateVertexIndex(gx, gy); // now do line check. We look at the east and south lines.\n        // east first\n\n        if (getStampPixelAt(gx, gy) !== getStampPixelAt(gx, gy - 1)) {\n          var v1 = getOrCreateVertexIndex(gx + 1, gy);\n          lines.push([v0, v1]);\n        } // south next\n\n\n        if (getStampPixelAt(gx, gy) !== getStampPixelAt(gx - 1, gy)) {\n          var _v = getOrCreateVertexIndex(gx, gy + 1);\n\n          lines.push([v0, _v]);\n        }\n      }\n    }\n  }\n\n  return {\n    points: new Float32Array(vertices.flat()),\n    lines: new Uint16Array(lines.map(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          v0 = _ref3[0],\n          v1 = _ref3[1];\n\n      return [2, v0, v1];\n    }).flat())\n  };\n}\n\nfunction vtkPaintBrushContextRepresentation(publicAPI, model) {\n  model.classHierarchy.push('vtkPaintBrushContextRepresentation');\n  model.internalPolyData = vtkPolyData.newInstance({\n    mtime: 0\n  });\n  model.internalArrays = {\n    points: model.internalPolyData.getPoints(),\n    lines: model.internalPolyData.getLines()\n  };\n  model.pipelines = {\n    brush: {\n      source: publicAPI,\n      mapper: vtkMapper2D.newInstance({\n        transformCoordinate: vtkCoordinate.newInstance({\n          coordinateSystem: Coordinate.WORLD\n        })\n      }),\n      actor: vtkActor2D.newInstance({\n        pickable: false,\n        parentProp: publicAPI\n      })\n    }\n  };\n  var actorProperty = model.pipelines.brush.actor.getProperty();\n  actorProperty.setLineWidth(2);\n  actorProperty.setColor([1, 0, 0]);\n  actorProperty.setDisplayLocation(DisplayLocation.FOREGROUND);\n  actorProperty.setRepresentation(Representation.SURFACE);\n  vtkWidgetRepresentation.connectPipeline(model.pipelines.brush);\n  publicAPI.addActor(model.pipelines.brush.actor);\n\n  publicAPI.requestData = function (inData, outData) {\n    var widgetState = inData[0];\n    var stamp = widgetState.getStamp();\n    var brush = widgetState.getBrush();\n    var indexToWorld = model.indexToWorld,\n        worldToIndex = model.worldToIndex;\n\n    if (stamp && brush.getOrigin()) {\n      var location = [];\n      vec3.transformMat4(location, brush.getOrigin(), worldToIndex);\n      var contour = generateContour({\n        stamp: stamp,\n        location: location,\n        slicingIndex: model.slicingIndex,\n        indexToWorld: indexToWorld,\n        imageSpacing: model.imageSpacing\n      });\n      var _model$internalArrays = model.internalArrays,\n          points = _model$internalArrays.points,\n          lines = _model$internalArrays.lines;\n      points.setData(contour.points);\n      lines.setData(contour.lines);\n      model.internalPolyData.modified();\n    }\n\n    outData[0] = model.internalPolyData;\n  };\n}\n\nvar DEFAULT_VALUES = {\n  defaultScale: 1,\n  drawBorder: false,\n  drawFace: true,\n  worldToIndex: null,\n  indexToWorld: null,\n  slicingIndex: 0,\n  imageSpacing: [1, 1, 1]\n}; // ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkContextRepresentation.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['slicingIndex', 'indexToWorld', 'worldToIndex', 'imageSpacing']);\n  macro.get(publicAPI, model, ['mapper', 'actor']);\n  vtkPaintBrushContextRepresentation(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nexport var newInstance = macro.newInstance(extend, 'vtkPaintBrushContextRepresentation');\nexport default {\n  newInstance: newInstance,\n  extend: extend\n};","map":{"version":3,"names":["vtkPolyData","vtkActor2D","vtkContextRepresentation","vtkWidgetRepresentation","macro","vtkMapper2D","vtkCoordinate","Coordinate","Representation","DisplayLocation","vec3","rescaleStamp","generateContour","initialStamp","stamp","location","slicingIndex","indexToWorld","imageSpacing","sliceSpacing","splice","size","xdim","ydim","xoffset","Math","floor","yoffset","gridxdim","gridydim","vertices","lines","vertexMap","getOrCreateVertexIndex","x","y","key","indexCoords","map","val","round","worldCoords","transformMat4","push","index","length","getStampPixelAt","pixels","gy","gx","count","v0","v1","points","Float32Array","flat","Uint16Array","vtkPaintBrushContextRepresentation","publicAPI","model","classHierarchy","internalPolyData","newInstance","mtime","internalArrays","getPoints","getLines","pipelines","brush","source","mapper","transformCoordinate","coordinateSystem","WORLD","actor","pickable","parentProp","actorProperty","getProperty","setLineWidth","setColor","setDisplayLocation","FOREGROUND","setRepresentation","SURFACE","connectPipeline","addActor","requestData","inData","outData","widgetState","getStamp","getBrush","worldToIndex","getOrigin","contour","setData","modified","DEFAULT_VALUES","defaultScale","drawBorder","drawFace","extend","initialValues","Object","assign","setGet","get"],"sources":["/home/kv/Desktop/Nikhil/VolView-4.0.0/src/vtk/PaintBrushContextRepresentation/index.js"],"sourcesContent":["import vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkActor2D from '@kitware/vtk.js/Rendering/Core/Actor2D';\nimport vtkContextRepresentation from '@kitware/vtk.js/Widgets/Representations/ContextRepresentation';\nimport vtkWidgetRepresentation from '@kitware/vtk.js/Widgets/Representations/WidgetRepresentation';\nimport macro from '@kitware/vtk.js/macros';\nimport vtkMapper2D from '@kitware/vtk.js/Rendering/Core/Mapper2D';\nimport vtkCoordinate from '@kitware/vtk.js/Rendering/Core/Coordinate';\nimport { Coordinate } from '@kitware/vtk.js/Rendering/Core/Coordinate/Constants';\nimport { Representation } from '@kitware/vtk.js/Rendering/Core/Property/Constants';\nimport { DisplayLocation } from '@kitware/vtk.js/Rendering/Core/Property2D/Constants';\nimport { vec3 } from 'gl-matrix';\nimport { rescaleStamp } from '@/src/core/tools/paint';\n\nfunction generateContour({\n  stamp: initialStamp,\n  location,\n  slicingIndex,\n  indexToWorld,\n  imageSpacing,\n}) {\n  const sliceSpacing = [...imageSpacing];\n  sliceSpacing.splice(slicingIndex, 1);\n  const stamp = rescaleStamp(initialStamp, sliceSpacing, true);\n  const [xdim, ydim] = stamp.size;\n  const xoffset = Math.floor((xdim - 1) / 2);\n  const yoffset = Math.floor((ydim - 1) / 2);\n\n  // grid of corner points (top-left to bottom-right)\n  const gridxdim = xdim + 1;\n  const gridydim = ydim + 1;\n\n  const vertices = []; // arr of 3-tuples\n  const lines = []; // arr of 2-tuples of vertex indices\n\n  // maps grid x/y to vertex index\n  const vertexMap = {};\n  const getOrCreateVertexIndex = (x, y) => {\n    const key = `${x},${y}`;\n    if (key in vertexMap) {\n      return vertexMap[key];\n    }\n\n    const indexCoords = [...location].map((val) => Math.round(val));\n    if (slicingIndex === 0) {\n      indexCoords[1] += x - xoffset - 0.5;\n      indexCoords[2] += y - yoffset - 0.5;\n    } else if (slicingIndex === 1) {\n      indexCoords[0] += x - xoffset - 0.5;\n      indexCoords[2] += y - yoffset - 0.5;\n    } else if (slicingIndex === 2) {\n      indexCoords[0] += x - xoffset - 0.5;\n      indexCoords[1] += y - yoffset - 0.5;\n    }\n\n    // get the grid point x/y's actual vertex in world space\n    // since grid x/y represents the top-left of the actual pixel\n    // at x/y, the true continuous index value of the vertex\n    // is x-0.5/y-0.5.\n\n    const worldCoords = [];\n    vec3.transformMat4(worldCoords, indexCoords, indexToWorld);\n    vertices.push(worldCoords);\n\n    const index = vertices.length - 1;\n    vertexMap[key] = index;\n    return index;\n  };\n\n  const getStampPixelAt = (x, y) => {\n    if (x < 0 || x >= xdim) return 0;\n    if (y < 0 || y >= ydim) return 0;\n    return stamp.pixels[y * xdim + x] || 0;\n  };\n\n  for (let gy = 0; gy < gridydim; gy++) {\n    for (let gx = 0; gx < gridxdim; gx++) {\n      // evaluate point to see if it needs inclusion\n      // by looking at all 4 pixels that share this point\n      // as a corner.\n      // if all empty or all filled, the current point is\n      // not used in the contour.\n      const count =\n        getStampPixelAt(gx, gy) +\n        getStampPixelAt(gx - 1, gy) +\n        getStampPixelAt(gx, gy - 1) +\n        getStampPixelAt(gx - 1, gy - 1);\n\n      if (count > 0 && count < 4) {\n        const v0 = getOrCreateVertexIndex(gx, gy);\n\n        // now do line check. We look at the east and south lines.\n        // east first\n        if (getStampPixelAt(gx, gy) !== getStampPixelAt(gx, gy - 1)) {\n          const v1 = getOrCreateVertexIndex(gx + 1, gy);\n          lines.push([v0, v1]);\n        }\n        // south next\n        if (getStampPixelAt(gx, gy) !== getStampPixelAt(gx - 1, gy)) {\n          const v1 = getOrCreateVertexIndex(gx, gy + 1);\n          lines.push([v0, v1]);\n        }\n      }\n    }\n  }\n\n  return {\n    points: new Float32Array(vertices.flat()),\n    lines: new Uint16Array(lines.map(([v0, v1]) => [2, v0, v1]).flat()),\n  };\n}\n\nfunction vtkPaintBrushContextRepresentation(publicAPI, model) {\n  model.classHierarchy.push('vtkPaintBrushContextRepresentation');\n\n  model.internalPolyData = vtkPolyData.newInstance({ mtime: 0 });\n  model.internalArrays = {\n    points: model.internalPolyData.getPoints(),\n    lines: model.internalPolyData.getLines(),\n  };\n\n  model.pipelines = {\n    brush: {\n      source: publicAPI,\n      mapper: vtkMapper2D.newInstance({\n        transformCoordinate: vtkCoordinate.newInstance({\n          coordinateSystem: Coordinate.WORLD,\n        }),\n      }),\n      actor: vtkActor2D.newInstance({ pickable: false, parentProp: publicAPI }),\n    },\n  };\n\n  const actorProperty = model.pipelines.brush.actor.getProperty();\n  actorProperty.setLineWidth(2);\n  actorProperty.setColor([1, 0, 0]);\n  actorProperty.setDisplayLocation(DisplayLocation.FOREGROUND);\n  actorProperty.setRepresentation(Representation.SURFACE);\n\n  vtkWidgetRepresentation.connectPipeline(model.pipelines.brush);\n\n  publicAPI.addActor(model.pipelines.brush.actor);\n\n  publicAPI.requestData = (inData, outData) => {\n    const widgetState = inData[0];\n\n    const stamp = widgetState.getStamp();\n    const brush = widgetState.getBrush();\n    const { indexToWorld, worldToIndex } = model;\n\n    if (stamp && brush.getOrigin()) {\n      const location = [];\n      vec3.transformMat4(location, brush.getOrigin(), worldToIndex);\n\n      const contour = generateContour({\n        stamp,\n        location,\n        slicingIndex: model.slicingIndex,\n        indexToWorld,\n        imageSpacing: model.imageSpacing,\n      });\n\n      const { points, lines } = model.internalArrays;\n      points.setData(contour.points);\n      lines.setData(contour.lines);\n\n      model.internalPolyData.modified();\n    }\n    outData[0] = model.internalPolyData;\n  };\n}\n\nconst DEFAULT_VALUES = {\n  defaultScale: 1,\n  drawBorder: false,\n  drawFace: true,\n  worldToIndex: null,\n  indexToWorld: null,\n  slicingIndex: 0,\n  imageSpacing: [1, 1, 1],\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkContextRepresentation.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, [\n    'slicingIndex',\n    'indexToWorld',\n    'worldToIndex',\n    'imageSpacing',\n  ]);\n  macro.get(publicAPI, model, ['mapper', 'actor']);\n  vtkPaintBrushContextRepresentation(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(\n  extend,\n  'vtkPaintBrushContextRepresentation'\n);\n\nexport default { newInstance, extend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}